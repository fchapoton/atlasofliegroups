<character_table_G.at

{springer(orbits[i])= characters[springer[i]]
springer(0-orbit)=characters[3] (dimension 1, degree 6: sgn)
springer(A1)=characters[1] (dimension 1, degree 3)
springer(A1~)=characters[4] (dimension 2, degree 2)
springer(G2(a1))=characters[5] (dimension 1, degree 2)
springer(G2)=characters[0] (dimension 1, degree 0: trivial)
}

set G2_diagrams=[[0,0],[0,1],[1,0],[0,2],[2,2]]
set G2_dual_diagrams=[[2,2],[0,2],[0,2],[0,2],[0,0]]

set dual_map_G2(ComplexNilpotent O)=ComplexNilpotent:
let diagram=O.diagram_normalized[0] then
index=find(G2_diagrams,diagram) then
dual_diagram=G2_dual_diagrams[index] in
orbit_by_diagram(O.root_datum,[dual_diagram])

set springer_G2(int i)=int:[3,1,4,5,0][i]
set springer_G2(RootDatum rd)=(int -> int):(int i):
let (type,map)=Cartan_matrix_type(rd) in
assert(type="G2", "not type G2");
springer_G2(map[i])


set springer_G2_by_diagram=([int]->int):([int] diagram):
springer_G2(find(G2_diagrams,diagram))

set springer_G2_by_diagram(RootDatum rd)=([int]->int):([int] diagram):
let (type,map)=Cartan_matrix_type(rd) in
assert(type="G2", "not type G2");
springer_G2_by_diagram(permute(map,diagram))

set springer_G2(ComplexNilpotent orbit)=int:
springer_G2_by_diagram(orbit.root_datum)(orbit.diagram)

{requirement: ct.derived is of type G2}
set springer_table_G2(CharacterTable ct)=
(ct,
ct.root_datum.orbits,
dual_map_G2@ComplexNilpotent,
dual_map_G2@ComplexNilpotent,
springer_G2@ComplexNilpotent
)

set springer_table_G2()=
springer_table_G2(simply_connected(G2).character_table)
