<weak_packets.at

{computing weak packets using precomputed cell_traces
used only for E8_s}


{weak_packet:
 given: a RootDatum rd and an even orbit O_check for the dual,
 a SpringerTable for rd,
 "cell_data": precomputed cell characters
 compute weak packet using the precomputed cell characters
}

set weak_packet(
SpringerTable st,
ComplexNilpotent O_check,
[(([Param],[WCell]),[([int],[int])])] cell_and_character_data)=
([([Param],[WCell])],[(int,int,Param)]):
assert(is_locally_isomorphic(integrality_datum(O_check.root_datum.dual,O_check.H/2),st.root_datum),
 "root datum mismatch, probably not using the integrality datum for the orbit");
let gamma_target=O_check.H/2 then
()=if cells_verbose then
 prints("gamma_target:",gamma_target);
 prints("Computing weak packet for ", #cell_and_character_data, " blocks ",
 "dual orbit:",new_line, " dual root datum: ", O_check.root_datum,new_line, " diagram: ", O_check.diagram, new_line,
 " normalized diagram: ", O_check.diagram_normalized, new_line,
 " H: ", O_check.H, new_line,
 " dimension: ", O_check.dim_nilpotent)
fi then
()=prints("using precomputed parameters and cells ") then
()=if cells_verbose then prints("inf. char.=",gamma_target) fi then
 O=st.dual_map_i(O_check) then
 ()=if cells_verbose then
  prints("orbit:",new_line, " root datum: ", O.root_datum, new_line, " diagram: ", O.diagram, new_line,
   " normalized diagram: ", O.diagram_normalized, new_line,
   " H: ", O.H, new_line,
   " dimension: ", O.dim_nilpotent)
fi then
sigma=st.springer(O) then
()=if cells_verbose then prints("sigma=", sigma, " of dimension ",st.ct.dimension(sigma)) fi then
wp=parameters_given_AV_infinitesimal_character(st,O,gamma_target,cell_and_character_data) then
cell_data=for (d,) in cell_and_character_data do d od in
(cell_data,wp)

{same as previous, running over a set of orbits,
 use precomputed version iff the orbit is even}

set weak_packets(
SpringerTable st,
[ComplexNilpotent] dual_orbits,
[(([Param],[WCell]),[([int],[int])])] cell_and_character_data)=[([([Param],[WCell])],[(int,int,Param)])]:
for O_check in dual_orbits do
 if O_check.is_even then weak_packet(st,O_check,cell_and_character_data)
  else
  let (d,)=cell_and_character_data[0] then
  (params,)=d then
  G=params[0].real_form in
  weak_packet(O_check,G)
 fi
od

{compute SpringerTable also}
set weak_packets(RealForm G,[ComplexNilpotent] dual_orbits,
[(([Param],[WCell]),[([int],[int])])] cell_and_character_data)=
[([([Param],[WCell])],[(int,int,Param)])]:
weak_packets(springer_table(G),dual_orbits,cell_and_character_data)

{prepare cell_data for input to weak_packets(st,O,cell_data)}
set cell_and_character_data(CharacterTable ct,[Param] parameters)=
[(([Param],[WCell]),[([int],[int])])]:
let bc=blocks_and_cells(parameters) then
cells=[[int]]:[],
characters=[[int]]:[] in
for i:#bc do
   let (parameters,cells)=bc[i] in
   ((parameters,cells),for cell in cells do
    let (params,)=cell in
    (params,ct.cell_character(cell))
   od)
od

set cell_and_character_data(CharacterTable ct,RealForm G)=
cell_and_character_data(ct,all_parameters_gamma(G,rho(G)))

set weak_packets_pre(RealForm G)=
[([([Param],[WCell])],[(int,int,Param)])]:
weak_packets(G,G.dual_orbits,cell_and_character_data(character_table(G),G))

{--------------------------}


<E8_big_block_parameters.at     {parameters_big: [Param]: big block}
<E8_big_block_cell_parameter_numbers.at   {cells_big=[[int]]}
<E8_big_block_cell_characters.at  {cell_characters_big=[[int]]}
<E8_big_block_cells.at  {cells_big=([int],([([int],[(int,int)])]))}



<E8_small_block_parameters.at     {parameters_small: [Param]: small block}
<E8_small_block_cell_parameter_numbers.at  {cells_small=[[int]]}
<E8_small_block_cell_characters.at  {cell_characters_small=[[int]]}
<E8_small_block_cells.at  {cells_small=([int],([([int],[(int,int)])]))}
prints("loaded files")

prints("Springer table already defined")
{prints("Defining Springer table")
set st=springer_table(simply_connected(E8))
prints("defined Springer table")
}

set irreducible_PS=parameter(G.x_open,null(8),rho(G))
set cells_tiny=W_cells(irreducible_PS)

set p=parameter(G.trivial.x, 2*rho(G),rho(G))
set cell_data_tiny_block=(([p],cells_tiny),[([0],[int]:ones(112))])

set orbits=G.even_dual_orbits
prints("defined even orbits")

set cell_data_big_block=((parameters_big,cells_big),for i:#cells_big do (cells_big[i], cell_characters_big[i]) od)
prints("defined cell_data_big_block")

set cell_data_small_block=((parameters_small,cells_small),for i:#cells_small do (cells_small[i], cell_characters_small[i]) od)
prints("defined cell_data_small_block")

set all_cell_data=[cell_data_big_block,cell_data_small_block,cell_data_tiny_block]
{
set show([([Param],[(int,int,Param)])] data)=void:
tabulate(
##for (,x)@i in data do
for list in x do 
 let (b,c,p)=list in
  [i.to_string,b.to_string,c.to_string,p.to_string, p.infinitesimal_character.to_string] od od
)

set run_E8_all_blocks()=
let wp= weak_packets(st,orbits,all_cell_data) in
prints("Computed weak packets");
show(wp);
{show_detail(wp);
show_very_long(wp);}
wp
}