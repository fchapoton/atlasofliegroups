<misc.at
<lietypes.at
<synthetic.at
<K.at

{affine Weyl groups, for now only the case of a simple RootDatum}

set cutoff=10000  {terminate calculation after cutoff steps}

set affine_verbose=false

{highest short roots, obtained as dual to highest root of the dual
}
set highest_short_roots(RootDatum rd)=[vec]:
for cr in highest_roots(dual(rd)) do root(rd,cr) od

set highest_short_root(RootDatum rd)=vec:
assert(derived_is_simple(rd),"Root Datum is not simple");
highest_short_roots(rd)[0]

{from basic.at:
reflect: action of root on X^* (add multiple of root)
coreflect: action of root on X_* (add multiple of coroot)
}

{Affine root datum: (vec alpha^v,RootDatum rd,vec alpha)
alpha should be a positive root, and alpha^v the
corresponding coroot
this acts on either X^* or X_* (\otimes Q)
in this file: 
 wt will always be an element of X^*\otimes Q
 cwt will always be an element of X_*\otimes Q

Action on X_*: affine reflection is

cwt -> s_alpha(cwt)+\alpha^v
       =cwt-<cwt,alpha>alpha^v + alpha^v
       =cwt-(<cwt,alpha>-1)alpha^v

Action on X^*: affine reflection is

wt ->  s_alpha(wt)+\alpha
       =wt-<wt,alpha^v>alpha + alpha
       =wt-(<gamma,alpha^v>-1)alpha
}

set_type AffineDatum = ([vec]  affine_coroots,RootDatum rd,[vec] affine_roots)
set rank(AffineDatum ad)=int:rank(ad.rd)
set ss_rank(AffineDatum ad)=int:ss_rank(ad.rd)
set is_simple(AffineDatum ad)=bool: is_simple(ad.rd)
set is_one_factor(RootDatum rd)=bool: derived_is_simple(rd)
set is_one_factor(AffineDatum ad)=bool: is_one_factor(ad.rd)

set number_factors(AffineDatum ad)=int:#ad.affine_roots

set affine_root_sum(AffineDatum ad)=sum(ad.affine_roots)
set affine_coroot_sum(AffineDatum ad)=sum(ad.affine_coroots)

{this applies only to simple RootDatum:
basic affine datum uses highest root, folding_order=1
 other affine data come from an automorphism of
 a simple root system rd_0 of order 2 or 3,
 in which case the underlying root datum rd is the
 "folded" one, and the affine root is the highest short
  root. In this case the order of the fold is
  ||highest root rd||/||highest short root of rd||
 Conclusion: the order of the fold is always:
 ||highest root of rd||/||affine_root of rd||
}

set folding_order(AffineDatum ad)=int:
assert(is_one_factor(ad),"More than one simple factor");
let f(ratvec v)=invariant_form(ad.rd)(v,v) in
rat_as_int(f(ad.rd.highest_root)/f(ad.affine_roots[0]))

set folding_orders(AffineDatum ad)=[int]:
let f(ratvec v)=invariant_form(ad.rd)(v,v) then
highest_roots=ad.rd.highest_roots in
for i:#highest_roots do
rat_as_int(f(highest_roots[i])/f(ad.affine_roots[i]))  od

{the affine reflections are labeled -1,-2,...}
set_type AffineWeylElt = (AffineDatum ad, [int] w)

set inverse(AffineWeylElt omega)=AffineWeylElt:(omega.ad,reverse(omega.w))

{make affine datum from a root, simple case}
set affine_datum(RootDatum rd,vec alpha)=AffineDatum:
assert(is_one_factor(rd),"RootDatum has more than one simple factor");
([coroot(rd,alpha)],rd,[alpha])

{default affine datum, simple case: use the highest root}
set affine_datum(RootDatum rd)=AffineDatum:
assert(is_one_factor(rd),"RootDatum has more than one simple factor");
affine_datum(rd,highest_root(rd))

{default affine datum general case: }
set affine_datum(RootDatum rd)=AffineDatum:
let hr=highest_roots(rd) in 
AffineDatum:(for alpha in hr do coroot(rd,alpha) od,rd,hr)

{ordinary reflections
 beta is a root, acting on X^* or X_*
 }
{Note: need the extra parentheses here to avoid ambiguity}
set reflect((AffineDatum ad, vec beta), ratvec wt)=ratvec:reflect(ad.rd,beta,wt)
set reflect((AffineDatum ad, int i), ratvec wt)=ratvec:reflect(ad.rd,ad.rd.posroots[i],wt)

set reflect(ratvec cwt,(AffineDatum ad, vec beta))=ratvec:coreflect(ad.rd,cwt,beta)
set reflect(ratvec cwt,(AffineDatum ad, int i))=ratvec:coreflect(ad.rd,cwt,ad.rd.posroots[i])

{affine reflections}

{affine reflection on X^*}
set affine_reflect(AffineDatum ad,int i,ratvec wt)=ratvec:
reflect((ad,ad.affine_roots[i]),wt)+(1/ad.folding_orders[i])*ad.affine_roots[i]

{affine reflection on X_*}
set affine_reflect(ratvec cwt,int i,AffineDatum ad)=ratvec:
reflect(cwt,(ad,ad.affine_coroots[i]))+(1/ad.folding_orders[i])*ad.affine_coroots[i]

{labels: defined for an affine datum,
multiplicity of each simple root in affine root(s)
more than one affine root: all multiplicities are 0 except 1
compute this by taking the <sum of affine
roots,fundamental_coweight[i]>
}
set labels(AffineDatum ad)=for i:rank(ad) do rat_as_int(ad.affine_root_sum*fundamental_coweights(ad.rd)[i]) od
set co_labels(AffineDatum ad)=for i:rank(ad) do rat_as_int(ad.affine_coroot_sum*fundamental_weights(ad.rd)[i]) od
set affine_labels(AffineDatum ad)=vec:labels(ad)##[1]
set co_affine_labels(AffineDatum ad)=vec:co_labels(ad)##[1]

{default labels for RootDatum: alpha=highest root}
set labels(RootDatum rd)=labels(affine_datum(rd))
set co_labels(RootDatum rd)=co_labels(affine_datum(rd))
set affine_labels(RootDatum rd)=vec:affine_labels(affine_datum(rd))
set co_affine_labels(RootDatum rd)=vec:co_affine_labels(affine_datum(rd))

{ordinary or affine reflection acting on X^*, indexed by integers
 0<= i <=ss_rank(rd)-1: ordinary reflection
 ss_rank(rd) <= i <= ss_rank(rd)+r-1: affine reflections
 }
set reflect_or_affine_reflect((AffineDatum ad,int i), ratvec wt)=ratvec:
assert(0<=i and i<=ad.ss_rank+ad.number_factors-1,"i is out of range");
if i<=ad.ss_rank-1 then reflect((ad,i),wt)
else  affine_reflect(ad,i,wt) fi

{ordinary or affine reflection acting on X_*}
set reflect_or_affine_reflect(ratvec cwt,(AffineDatum ad,int i))=ratvec:
if i>=0 then reflect(cwt,(ad,i)) else affine_reflect(cwt,-i,ad) fi

set reflect_or_affine_reflect(ratvec cwt,(AffineDatum ad,int i))=ratvec:
assert(0<=i and i<=ad.ss_rank+ad.number_factors-1,"i is out of range");
if i<=ad.ss_rank-1 then reflect(cwt,(ad,i))
else  affine_reflect(ad,i,cwt) fi

{wt\in X^*\otimes Q
affine coordinates: a pair (v,w) of ratvecs
v=[a_0,...,a_{n-1}]
n=semisimple rank, a_i=inner product with simple coroot
w=[b_0,...,b_{r-1}]
r=#simple factors
b_i=<affine_coroots[i],lambda>-1/folding_orders[i]
\sum_{i=0}^{n-1} a_i +\sum_{j=0}^{r-1}b_j=r
fundamental alcove: [a_0,...,a_{n-1}],[b_0,...,b_{r-1}]
0\le a_i,b_j\le 1  all i,j
}
set affine_coordinates(AffineDatum ad, ratvec wt)=(ratvec,ratvec):
let v=for beta_ch in simple_coroots(ad.rd) do beta_ch*wt od then
w=for i:ad.number_factors do
-ad.affine_coroots[i]*wt+1/ad.folding_orders[i] od
in (v,w)

{default affine coordinates}
set affine_coordinates(RootDatum rd, ratvec wt)=(ratvec,ratvec):affine_coordinates(affine_datum(rd),wt)

{in case of vec argument, return vec result}
set affine_coordinates(AffineDatum ad, vec wt)=(vec,vec):
let (v,w)=affine_coordinates(ad,ratvec:wt) in (ratvec_as_vec(v),ratvec_as_vec(w))

set affine_coordinates(RootDatum rd, vec wt)=(vec,vec):affine_coordinates(affine_datum(rd),wt)

{affine coordinates: X_*\otimes Q case}
set affine_coordinates(ratvec cwt,AffineDatum ad)=(ratvec,ratvec):
let v=for beta in simple_roots(ad.rd) do beta*cwt od then
w=for i:ad.number_factors do
-ad.affine_roots[i]*cwt+1/ad.folding_orders[i] od
in (v,w)

set affine_coordinates(vec cwt,AffineDatum ad)=(vec,vec):
let (v,w)=affine_coordinates(ratvec:cwt, ad) in
(ratvec_as_vec(v),ratvec_as_vec(w))

set affine_coordinates(vec cwt,RootDatum rd)=(vec,vec):affine_coordinates(cwt,affine_datum(rd))

{test:
affine_coordinates(ad,wt)*co_affine_labels(ad)=1
affine_coordinates(cwt,ad)*affine_labels(ad)=1
}
set confirm(AffineDatum ad,ratvec coordinates)=void:
assert(coordinates*co_affine_labels(ad)=1,"confirm failed")

set confirm(ratvec coordinates,AffineDatum ad)=void:
assert(coordinates*affine_labels(ad)=1,"confirm failed")

set in_fundamental_alcove(AffineDatum ad,ratvec wt)=bool:
all(for a in let (v,w)=affine_coordinates(ad,wt) in v##w  do 0 <= a and a <= 1 od)

set in_fundamental_alcove(ratvec cwt,AffineDatum ad)=bool:
all(for a in let (v,w)= affine_coordinates(cwt,ad) in v##w do 0 <= a and a <= 1 od)

{wt\in X^* \otimes Q}
{v=[a_1,...,a_n] n=ss_rank
 w=[b_1,...,b_r] r=#simple_factors
 v##w=[a_1,...,a_n,b_1,...,b_r]
      [0, ,...,n-1,n,..., ,n+r-1]  (indices from 0 to n+r-1)
}
set affine_non_dominant_index (AffineDatum ad, ratvec wt) = int:
let (v,w)=affine_coordinates(ad,wt) in first(for a in v##w do a<0 od)

{cwt case}
set affine_non_dominant_index (ratvec cwt,AffineDatum ad) = int:
let (v,w)=affine_coordinates(cwt,ad) in first(for a in v##w do a<0 od)

{wt\in X^* \otimes Q}
set affine_make_dominant (AffineDatum ad, ratvec wt) = (ratvec,AffineWeylElt):
  assert(#wt=rank(ad),"vector wt wrong size for (affine) root system");
  let rd=ad.rd in
  if affine_verbose then prints("wt=", wt,  new_line, "affine_coordinates:=", affine_coordinates(ad,wt)) fi;
  let count=0 in
  let i=0 { needed to pass value across 'do' }
  then w = while (count <=cutoff) and >=(i:=affine_non_dominant_index(ad,wt))
    do count+:=1;
       wt:=reflect_or_affine_reflect((ad,i),wt);
        {debugging:}
        let root= if i<rank(ad) then simple_roots(rd)[i] else ad.affine_roots[i-rank(ad)] fi in
{        prints(count, "  i:",i," root:", root ,"   wt:",wt, "  coords:", affine_coordinates(ad,wt));}
{        confirm(rd,affine_coordinates(rd,wt)); {debugging only}}
        {\debugging}
       i
    od
  in   {prints(new_line,"wt=", wt,  "   w=",
       affine_coordinates(rd,wt),new_line);}(wt,(ad,w))

{wt\in X_* \otimes Q}
set affine_make_dominant (ratvec cwt,AffineDatum ad) = (ratvec,AffineWeylElt):
  assert(#cwt=rank(ad),"vector cwt wrong size for (affine) root system");
  let rd=ad.rd in
  if affine_verbose then prints("cwt=", cwt,  new_line, "affine_coordinates:=", affine_coordinates(cwt,ad)) fi;
  let count=0 in
  let i=0 { needed to pass value across 'do' }
  then w = while (count <=cutoff) and >=(i:=affine_non_dominant_index(cwt,ad))
    do count+:=1;
       cwt:=reflect_or_affine_reflect(cwt,(ad,i));
        {debugging:}
        let root= if i<rank(ad) then simple_roots(rd)[i] else ad.affine_coroots[i-rank(ad)] fi in
{        prints(count, "  i:",i," coroot:", coroot ,"   cwt:",cwt, "  coords:", affine_coordinates(cwt,ad));}
{        confirm(rd,affine_coordinates(rd,cwt)); {debugging only}}
        {\debugging}
       i
    od
  in   {prints(new_line,"cwt=", cwt,  "   w=",
       affine_coordinates(rd,cwt),new_line);}(cwt,(ad,w))

{
set *(AffineWeylElt omega,ratvec v)=ratvec:
for i in reverse(omega.w) do
v:=reflect_or_affine_reflect(omega.ad,i,v) od;v

set *(ratvec v,AffineWeylElt omega)=ratvec:
for i in reverse(omega.w) do
v:=reflect_or_affine_reflect(omega.ad,i,v) od;v

{to be consistent with other naming conventions in basic.at}

{v \in X^* \otimes Q, returns (w,omega) such that omega*w=v}
set affine_from_dominant(AffineDatum ad, ratvec wt)=(ratvec,AffineWeylElt):
affine_make_dominant(ad,wt)

set affine_dominant(AffineDatum ad, ratvec wt)=ratvec:
let (v,)=affine_from_dominant(ad,wt) in v

{v \in X_* \otimes Q, returns (w,omega) such that omega*w=v}
set affine_from_dominant(ratvec cwt,AffineDatum ad)=(ratvec,AffineWeylElt):
affine_make_dominant(ad,cwt)

set affine_dominant(ratvec cwt,RootDatum rd)=ratvec:
let (v,)=affine_from_dominant(cwt,affine_datum(rd)) in v

}


{used in all_finite_order.at: should be updated}

set affine_root(RootDatum rd)=vec:highest_root(rd)

{v\in X^*_Q, in co_affine coordinates}
set co_usual_coordinates(RootDatum rd, ratvec v)=
let rv=ratvec:null(rank(rd)) in
for i:rank(rd) do rv+:=v[i]*fundamental_coweights(rd)[i] od;rv

set co_affine_root (RootDatum rd)=vec:
   let l=find_posroot(rd,highest_root(rd)) in
   -poscoroots(rd)[l]

set affine_reflection_alt(RootDatum rd, ratvec v)=ratvec:
   let alpha=affine_root(rd) in
   v-(v*alpha+1)*co_affine_root(rd)

set move_to_fundamental_domain(RootDatum rd, ratvec v)=ratvec:
   let alpha=affine_root(rd), w=v then q=w*alpha+1 in
   while q<0 do w:=dominant(affine_reflection_alt(rd,w),rd);
     q:=w*alpha+1 od; w

{constructions of AffineDatum}

set affine_datum(LieType lt)=AffineDatum:
affine_datum(simply_connected(lt))

set affine_datum_long(LieType
lt)=AffineDatum:affine_datum(simply_connected(lt))

set affine_datum_short(LieType lt)=AffineDatum:
let rd=simply_connected(lt) in
affine_datum(rd,highest_short_root(rd))

set dual(AffineDatum (alpha_ch,rd,alpha))=AffineDatum:(alpha,rd,alpha_ch)

set P_3D4=mat:[[1,0],[0,1],[0,0],[0,0]]
set folded(RootDatum rd,mat delta)=(RootDatum,mat):
let n=order(delta) in
assert(n<=3,"order must be 1,2,3");
if n=1 then (rd,id_mat(rank(rd)))
elif n=2 then
 let G=quasicompact_form(inner_class(rd,delta)) then
 ((,),(,pullback))=G_K_roots_and_coroots_raw(KGB(G,0)) in
 (root_datum(G_K_simple_roots_and_coroots(KGB(G,0))),pullback)
else {n=3}
 assert(Lie_type(rd)=Lie_type("D4"));(simply_connected(G2),P_3D4) fi


set folded(RootDatum rd,int n)=(RootDatum,mat):
assert(n<=3,"order must be 1,2,3");
if n=1 then (rd,id_mat(rank(rd)))
elif n=2 then
 let G=quasicompact_form(inner_class(rd,"u")) then
 ((,),(,pullback))=G_K_roots_and_coroots_raw(KGB(G,0)) in
 (root_datum(G_K_simple_roots_and_coroots(KGB(G,0))),pullback)
else {n=3}
 assert(Lie_type(rd)=Lie_type(D4));(simply_connected(G2),P_3D4) fi

set folded_affine(RootDatum rd,mat delta)=(AffineDatum,mat):
let (folded_rd,P)=folded(rd,delta) in
if order(delta)=1 then (affine_datum(folded_rd),P) else
(affine_datum(folded_rd,highest_short_root(folded_rd)),P) fi

set folded_affine(RootDatum rd,int n)=(AffineDatum,mat):
let (folded_rd,P)=folded(rd,n) in
if n=1 then (affine_datum(folded_rd),P) else
(affine_datum(folded_rd,highest_short_root(folded_rd)),P) fi

set affine_datum(string AtoE,int rank,int order_of_automorphism)=(AffineDatum,mat):
let rd=simply_connected(AtoE+rank.to_string) in
folded_affine(rd,order_of_automorphism)

set affine_datum(string AtoE,int rank)=(AffineDatum,mat):affine_datum(AtoE,rank,1)




{
set rd=Sp(4)
set ad=affine_datum(rd)
set v=[10,0]
}
