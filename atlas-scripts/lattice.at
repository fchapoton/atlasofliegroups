<basic.at
<matrix.at { for |ech_up@(mat,[int])| }

{ General linear algebra over $\Z$. In so far as saturation of lattices is
  done, this actually relates to vector spaces over $\Q$, but all computations
  are done with integers only, distinguishing this script from Gaussian-elim.at
}

{ |M| is an $n\times k$ matrix, so columns of |M| span a $\Z$-submodule
  $ W=image(M)$ of $\Z^n$; get canonical generators for this submodule }
set image_lattice (mat A) = mat:
   let (M,,pivots,)=echelon(A) then c=#M
in for i@j in pivots
   do let col=M[j] then pivot=col[i]
   in for l: c-1-j from j+1 do M[l]-:=col*(M[i,l]\pivot) od
   od; M

{ whether |image_lattice(M)| is a saturated lattice (direct factor of $\Z^n$) }
set is_saturated (mat M) = bool:
   let (M,,pivots,)=echelon(M)
in set (M,):=ech_up(M,pivots); product(M.main_diagonal)=1

{ dimension |c| of image, together with a $\Z$-inverible matrix whose first |c|
  columns span that saturation of the image, the remainder a chosen complement }
set adapted_direct_sum (mat M) = (int,mat):
   let (M,,pivot,)=echelon(M) then (r,c)=shape(M), !M0=M
   then R=id_mat(r) { record row operations, held in inversed form }
in for j:c { loop over columns of M while it is being modified in the loop }
   do let col=M[j] then (d,C)=Bezout(col[j:pivot[j]+1]), tM=^M
   then tM_C=tM[j:pivot[j]+1] * C, R_C = R[j:pivot[j]+1] * ^C.inverse
   in M := c^ for i:r do if i<j or i>pivot[j] then tM[i] else tM_C[i-j] fi od
   ;  R := r# for i:r do if i<j or i>pivot[j] then  R[i] else  R_C[i-j] fi od
   ; assert(M[j,j]=d)
   od; assert(R*M=M0); (c,R)

set image_subspace (mat M) = mat: { generators for $\Q$-span of image of |M| }
   let (c,R)=adapted_direct_sum(M) in R[:c]

set image_complement_basis (mat M) = mat:
   let (c,R)=adapted_direct_sum(M) in R[c:]

set saturation = image_subspace@mat { intersection of $\Z^n$ with $\Q$-span }

{ a basis representing the quotient by sublattice spanned by columns of |M|;
  tests that this sublattice is a direct factor, and throws an error if not }
set free_quotient_lattice_basis (mat M) = mat:
( let (E,,,)=echelon(M) in { pre-compute echelon }
  assert(E.is_saturated,"sublattice is not a direct factor")
; image_complement_basis(E)
)

{ a basis representing the quotient by saturation of sublattice, so no test }
set saturation_quotient_basis = image_complement_basis@mat


{ |M| is an $n\times k$ matrix; its columns span a submodule $W$ of $\Z^n$.
  Compute $n\times n$ matrix of projection onto the saturation (or $\Q$-span)
  of $W$, parallel to its complement from |adapted_sirect_sum(M)|.
}
set projector_to_image (mat M) = mat:
  let (c,R)=adapted_direct_sum(M) in R[ : , :c] * R.inverse[ :c, : ]


{ complementary projector, to chosen complement to |image_subspace(M)| }
set projector_mod_image (mat M) = mat:
  let (c,R)=adapted_direct_sum(M) in R[ : ,c: ] * R.inverse[c: , : ]

{ |M| is an $n\times k$ matrix; its columns span a submodule $W$ of $\Z^n$.
  A complement to |image_subspace(M)| is chosen by |adapted_direct_sum(M)|, and
  |decompose(M,w)=(u,v)| with |u| in |image_subspace(M)| and |v| in complement.
}
set decompose (mat M, vec v)= (vec,vec):
   let (c,R)=adapted_direct_sum(M) then R1=R.inverse
in (R[:,:c] * (R.inverse[:c,:] * v), R[:,c:] * (R.inverse[c:,:] * v) )

set decompose (mat M, ratvec w) = (ratvec,ratvec):
   let (v,d)=%w then (v1,v2)=decompose(M,v) in (v1/d,v2/d)


{ assuming M injective and Im(M) is A-stable, return unique B with A*M=M*B,
  which is action of A restricted to that sublattice $\Z^m$, embedded via M
}
set restrict_action (mat A, mat M) = mat: { shapes A: n by n, M: n by m }
   case solve(M,A*M) | B.solution: B
   | else error("Image lattice M is not fixed by A")
   esac

{ assuming M full row rank and ker(M) is A-stable, find unique B with M*A=B*M }
set corestrict_action (mat M,mat A) = mat:  { shapes M: m by n, A: n by n }
   case solve(^M,^(M*A)) | tB.solution: ^tB
   | else error("Kernel of M is not fixed by A")
   esac

{ |M| is an $n\times k$ matrix; its columns span a subspace $W$ of $\Q^n$.
  Assuming this subspace is |A|-stable, |A| induces an operator in $\Q^n/W$;
  return its matrix w.r.t the complement chosen by |adapted_direct_sum(M)|.
}
set quotient_matrix (mat A,mat M) = mat:
  let (c,R)=adapted_direct_sum(M) in (R.inverse[c: , : ]*A*R[ : ,c: ])

set solve_ratvec (mat A, vec v) = ratvec:
  (A,ratvec:v).solve.(rat_requisition("not in span"))

{ integer vector (lattice) solutions to linear system }


set in_lattice (mat A, ratvec u) = bool: { whether v in image lattice of A }
  let (b,n)=%u in n=1 and solve(A,b).any

set vec_solve (mat A, ratvec u) = maybe_a_vec: { integer solution to A*x=b }
  let (b,n)=%u in if n>1 then no_vec() else solve(A,b) fi

{ express columns of M relative to basis A of a sub-lattice that contains them
  A: nxm matrix, columns are a basis of a Z-module V of rank m
  M: nxr matrix, columns span a submodule of V; returns mxr matrix C,
  column i gives column i of M as a sum of columns of A i.e., A*C=M
}
set in_lattice_basis (mat A,mat M) = mat:
  #A { size m of solutions } # for v in M do required_solution(A,v) od

{---------------- some auxiliary lattice functions -----------------------}

set select_columns([int] columns, mat M)=mat:for i in columns do M[i] od
set select_rows([int] rows, mat M)=mat:^(select_columns(rows,^M))
set first_columns(int n,mat M)=mat:select_columns(#n,M)
set first_rows(int n,mat M)=mat:select_rows(#n,M)

{similar to projector_mod_image
suppose M is an mxn matrix of rank r, whose columns span an r-dimensional
 subspace of U=Z^r in V=Z^m
projector_mod_image(M) is mxm, of rank m-r, whose image is 
 a complement to U in V
mod_image_projector(M) is mx(m-r), describing the map from V 
 to an (m-r)-dimensional space }
set mod_image_projector(mat M)= mat:
  let (c,R)=adapted_direct_sum(M) in R.inverse[c: , : ]

{basis of intersection of two matrices 
 returns (X,Y) where the columns of X span the intersection
 Y is the first rows of kernel A##B
}
set intersection_plus(mat A,mat B)=(mat,mat):
assert(n_rows(A)=n_rows(B),"A and B must have same number of rows");
if n_columns(A)=0 or n_columns(B)=0 then (null(n_rows(A),0),null(n_rows(A),0)) else
let A1=image_lattice(A) {size mxn'}, B1=image_lattice(B) {mxr'} then
N=kernel(A1##B1) then   {size (n'+r')x t, t=dimension(kernel)}
M=first_rows(n_columns(A1),N) {first n' rows of N, where n'=#columns of A1, so size n'xt}
{M=^((^N)[0:n_columns(A1)])  }
in (A1*M,M) {(size mxt, size n'xt)} fi

{just return the matrix giving the intersection}
set intersection(mat A,mat B)=mat:
let (X,)=intersection_plus(A,B) in X


{adapted_direct_sum in all its glory
A: (r,n) matrix
 E: echelon form of A is an (r,n) matrix
 E= M##Z where M (r,c) matrix (nonzero columns) and Z=(r,n-c) zero matrix
 echelon(A)=(mat M,mat C,vec s,int eps)  (see atlas-functions.help)
 M: (r,c) matrix, C (n,n) invertible  (s: pivot rows, eps is a sign)
 c=#columns of M
 n-c=dimension(kernel(A))
 Then AC=E=M##Z 
 Furthermore M -> (mat N,mat R) 
 E: (r,c)  N:(r,c)  R: (r,r) invertible
 (RN)##Z=E##Z=AC
 AC=RN##Z
 Note: image_complement_basis is the last n-c columns of R
}
set adapted_direct_sum_plus (mat A) = (int,mat,mat,mat,mat,mat):
   let (M,C,pivot,)=echelon(A) then (r,c)=shape(M), N=M
   then R=id_mat(r) { record row operations, held in inversed form }
in for j:c { loop over columns of N while it is being modified in the loop }
   do let col=N[j] then (d,C)=Bezout(col[j:pivot[j]+1]), tN=^N
   then tN_C=tN[j:pivot[j]+1] * C, R_C = R[j:pivot[j]+1] * ^C.inverse
   in N := c^ for i:r do if i<j or i>pivot[j] then tN[i] else tN_C[i-j] fi od
   ;  R := r# for i:r do if i<j or i>pivot[j] then  R[i] else  R_C[i-j] fi od
   ; assert(N[j,j]=d)
   od; assert(R*N=M); (c,R,N,C,M,null(r,n_columns(A)-n_columns(N)))

