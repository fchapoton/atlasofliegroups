<basic.at
<matrix.at { for 'minor' (this dependency might be eliminated) }

{ M is an nxk matrix, columns of M define a Z-module W=image(M)\subset Z^n }
set submodule_basis (mat M) = mat:
  let (B,cs) = adapted_basis(M) in n_rows(B) # for c@j in cs do c*B[j] od

{ columns are a Q-basis of image(M) }
set Q_submodule_basis (mat M) = mat:
  let (B,cs) = adapted_basis(M) in n_rows(B) # for c@j in cs do B[j] od

{ a basis representing the quotient by sublattice spanned by columns;
  tests that this sublattice is a direct factor, and throws an error if not }
set quotient_module_basis (mat M) = mat:
( let (B,cs) = adapted_basis(M) then l=#cs in
  assert(cs=ones(l),"sublattice is not a direct factor")
; columns_with ((int j)bool: j>=l,B)
)

{ a basis representing the quotient by saturation of sublattice, so no test }
set saturation_quotient_module_basis (mat M) = mat:
  let (B,cs) = adapted_basis(M) then l=#cs
  in columns_with ((int j)bool: j>=l,B)
{this is a Q-basis of the quotient}
set Q_quotient_module_basis (mat M) = mat:saturation_quotient_module_basis(M)

{ Projection of v onto V/W parallel to W in basis from adapted_basis
  Basis of image space: projection of Q_quotient_module_basis(M)
}
set projection_mod_image (mat M) = mat:
  let (B,cs) = adapted_basis(M) then d=#cs
  in rows_with( (int i): i>=d, inverse(B) ) { coordinates on final part basis }



{ M is an nxk matrix whose columns span a submodule W of V=Z^n
  Projection to saturation of W, parallel to complement from |adapted_basis(M)|
  Basis of image space: initial vectors of |adapted_basis(M)|, i.e. Q_submodule_basis(M)
}
set projection_to_image (mat M) = mat:
  let (B,cs) = adapted_basis(M) then d=#cs
  in rows_with( (int i): i<d, inverse(B) )

set projection_to_image (mat M, ratvec v) = ratvec:
Q_submodule_basis(M)*projection_to_image(M)*v

{M is an nxk matrix whose columns span a submodule W of V=Q^n
 V=(V/W)\oplus W
 basis of W = first k columns of adapted_basis(M)
 basis of (V/W)\subset V = saturation_quotient_module_basis(M)
                         = last n-k columns of adapted_basis(M)
 decompose(M,w)=(u,v) according to this decomposition
}
set decompose(mat M,ratvec v)=
let A=projection_to_image(M) then
B=projection_mod_image(M) then
(C,w)=adapted_basis(M) in
let D=C[0:#w] in (D*A*v,saturation_quotient_module_basis(M)*B*v)


{ M is an n*k matrix whose columns span a rank k submodule W of V=Z^n
  A is an n*n matrix preserving W
  sub_matrix(M,W) is the k*k matrix giving the action of A on W,
  using columns of M as basis
}
set sub_matrix (mat A,mat M) = mat:
  let P = M#kernel(^M) then (Pinverse,d) = invert(P)
  then Q = minor(Pinverse*A*P,n_columns(M)) { extract top-left k*k block }
  in assert(=Q%d,"lattice not fixed"); Q\d

{ assuming M injective and Im(A*M)\subset Im(A), find unique C with A*M=M*C }
{ using decomposition M = L^{-1} * D * R^{-1} (B,L invertible, D diagonal)
  first find A' = L*A*L^{-1}, then A'' such that D*A'' = A'*D, which must
  exist, and finally compute C = R*A''*R^{-1}
}
set restrict_action (mat A, mat M) = mat:
  let (ds,L,R) = diagonalize(M), (l,r)=#M { also sizes of L,R; one has l>=r }
  then () = if #ds!=r then error("matrix has dependent columns") fi
  then A1 = L * A * inverse(L)
  then A1Dtr = l ^ for d@j in ds do d*A1[j] od { one has #A1Dtr=(r,l) }
  , A2tr= [vec]:[] { collects r vectors of size r } , zero=null(r)
  then () =
     for i: l { collect first r rows of A1, scaled; test remaining rows are 0 }
     do if i<r
        then
          if A1Dtr[i]%ds[i]=zero then  A2tr #:=  A1Dtr[i]\ds[i]
          else error("matrix does not fix lattice")
	  fi
        elif A1Dtr[i]!=zero then error("matrix does not fix image")
        fi
     od
  in R * (r^A2tr) * inverse(R)

set corestrict_action (mat A, mat M) = mat: ^restrict_action(^A,^M)

{ M is an nxk matrix whose columns span a submodule W of V=Z^n
  A is an nxn matrix preserving W
  quotient_matrix(M,W) is the matrix of M on V/W,
  using the basis from quotient_module_basis(M)
}
set quotient_matrix (mat M,mat A) = mat:
  let P= submodule_basis(M)#quotient_module_basis(M), ncM=n_columns(M)
  then (Pinverse,d) = invert(P)
  then Q = minor(Pinverse*A*P,n_columns(A)-ncM,ncM)
  in Q\d


set solve_ratvec (mat A, vec v) = ratvec:
  let (ds,L,R) = diagonalize(A) then d=#ds, target=L*v
  in begin
    for i:#target-d from d do assert(=target[i],"not in span") od
  ; columns_with((int j):j<d,R) * for i:d do target[i]/ds[i] od end

{ integer vector (lattice) solutions to linear system }


set in_lattice (mat M, ratvec u) = bool: { whether v in image lattice of M }
  let (ds,L,) = diagonalize(M), (v,n)=%u then target=L*v
  in n=1 and =target[#ds:] and all(for d@i in ds do =target[i]%d od)

set vec_solve (mat A, ratvec u) = [vec]: { <=1 non-rational solution to A*x=b }
  let (b,n)=%u in if n>1 then [] else solve(A,b) fi

{ as |solve_ratvec|, but require a denominator-free solution }
set solve_vec (mat A, vec v) = vec: { find integer solution to A*x=v }
  let s=solve(A,v) in assert(>#s,"linear system has no solution"); s[0]

{ express columns of M relative to basis A of a sub-lattice that contains them
  A: nxm matrix, columns are a basis of a Z-module V of rank m
  M: nxr matrix, columns span a submodule of V
  returns mxr matrix C, column i gives column i of M as a sum of columns of A
  i.e. A*C=M
}
set in_lattice_basis (mat A,mat M) = mat:
  n_columns(A) { size of solutions } # for v in M do solve_vec(A,v) od

{ write v as a linear combination of columns of A }
set solve_in_lattice ([vec] A, vec v) = vec:
  if =#A then assert(=v,"no solution"); null(0) else solve_vec(mat:A,v) fi

