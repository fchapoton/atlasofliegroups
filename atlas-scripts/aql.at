<W_orbit.at
<induction.at

{. Given a parameter p for G and a theta-stable parabolic P, list all
  infinitesimal characters v for L so that v+rho(u) is the infinitesimal
  character of p. .}
set inf_chars_for_L (Param p,Parabolic P)=[ratvec]:
   let rd=root_datum(p) in let L=Levi(P) in let rdl=root_datum(L) in
   let orb=W_orbit(rd,infinitesimal_character(p)) in
   let rho=rho_u(P) in
   let list=[] in
   for v in orb do if is_dominant(rdl,v-rho) then
   list#:=v-rho fi od; list

{. List all one-dimensional characters, in the weakly fair range,
  of L, with given infinitesimal character. .}
set wf_one_dim_params (ratvec ic, Parabolic P)=[Param]:
   let L=Levi(P) in let n=#KGB(L) in let x=KGB(L,n-1) in
   let G=real_form(P) in
   let list=all_parameters_x_gamma(x,ic) in
   let result=[] in for p in list do
   if is_one_dimensional(p) and is_weakly_fair(p,G) then
   result#:=p fi od; result

{. Auxiliary function. .}
set wf_aqs_param_pol (Param p, Parabolic P)=[ParamPol]:
   let G=real_form(P) in
   let ics=inf_chars_for_L(p,P) in
   let result=[] in
   for v in ics do
    let list=wf_one_dim_params (v,P) in
     for q in list do let aq=theta_induce_irreducible(q,G) in
     result#:=aq
     od od; result

{. Auxiliary function. .}
set wf_aqs_param (Param p, Parabolic P)=[Param]:
   let result=[] in
   for Q in wf_aqs_param_pol (p,P) do
     let R=%Q in for r in R do let (k,q)=r in
     if k!=1 then prints("Warning: negative coefficient!") fi;
     result#:=q od od;
     result

{. Auxiliary function. .}
set is_weakly_fair_Aq_P (Param p, Parabolic P)=bool:
   let list=wf_aqs_param (p,P) in
   not none(for q in list do q=p od)

{. List all proper theta-stable parabolics for G that are not Borels. .}
set special_theta_stable_parabolics(RealForm G)=[Parabolic]:
  let result=[] in
  for P in theta_stable_parabolics(G) do
  if #S(P)!=0 and #S(P)!=semisimple_rank(G) then
  result#:=P fi od; result

set special_theta_stable_parabolics(RealForm G,[int] list)=[Parabolic]:
  let result=[] in
  let PS=power_set(list) in
  for S in PS do if #S!=0 and #S!=#list then
  for P in theta_stable_parabolics_type(G,S) do
  result#:=P od fi od; result

{. Determine whether parameter p is that of a (constituent of a)
  weakly fair Aq(lambda) module. .}
set is_weakly_fair_Aq (Param p) = bool:
   if is_good_Aq(p) then prints("This is (weakly) good."); true
   else
   let G=real_form(p) in
   let tsp=special_theta_stable_parabolics(G) in
   not none (for P in tsp do
   is_weakly_fair_Aq_P(p,P) od) fi

set is_weakly_fair_Aq_alt (Param p) = bool:
   if is_good_Aq(p) then prints("This is (weakly) good."); true
   else
   let G=real_form(p) in
   let tsp=special_theta_stable_parabolics(G,support(x(p))) in
   not none (for P in tsp do
   is_weakly_fair_Aq_P(p,P) od) fi