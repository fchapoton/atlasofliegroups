<basic.at


set right_inverse(mat A) = mat: { section of a surjective lattice map A }
  let (diag,L,R) = diagonalize(A), (l,r)=shape(A) { also sizes of L,R }
  then ()=
    if #diag<l then error("image does not have full rank")
    elif abs(product(diag))!=1 then error("image is a proper sublattice")
    fi
  { now since every element of diag is $\pm1$, division is multiplication;
    so L*A*R has right-inv cols<l(I_r)*D_l; conjugate identity by L^-1, get: }
  in (r # for j:l do diag[j]*R[j] od) * L

set left_inverse(mat A) = mat: { for injective map to saturated sublattice }
  ^right_inverse(^A)

set weak_left_inverse(mat A) = (int,mat): { left inverse after saturation }
  let (diag,L,R) = diagonalize(A) then r = #diag then less_r = (int j):j<r
  in ( product(diag), columns_with(less_r,R) * rows_with(less_r,L) )

set reduce (mat M) = { factor out common divisor } mat:
  let inf=inv_fact(M) in if =#inf then M else M\inf[0] fi


set principal_submatrix(mat M, [int] S)=mat: { choice |S| of rows, columns }
   let m=#S in matrix((s,s), (int i,int j)int: M[S[i],S[j]] )

set main_diagonal_square_block(mat M, int size, int offset) = mat:
  M[ offset:offset+size, offset:offset+size ]
set top_left_square_block(mat M,int size) = mat: M[ :size, :size]
