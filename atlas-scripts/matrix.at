<basic.at

set row(mat M,int i)=vec:(^M)[i]
set column(mat M,int i)=vec:M[i]

set block_matrix(mat A,mat B) = mat:
  let ra=n_rows(A), rb=n_rows(B) then za=null(ra), zb=null(rb) in
  (ra+rb)# (for col in A do col##zb od ## for col in B do za##col od)

set minor(mat M, [int] S)=mat: { arbitrary choice |S| of rows, same columns }
let size=#S in size^ for i in S do for j in S do M[i,j] od od

set principal_minor(mat M, int size, int start) = mat: { |start| is offset }
  size ^ for i:size from start do for j:size from start do M[i,j] od od
set principal_minor(mat M,int size) = mat: principal_minor(M,size,0)

set right_inverse(mat A) = mat: { section of a surjective lattice map A }
  let (diag,L,R) = diagonalize(A), (l,r)=#A { also sizes of L,R }
  then ()=
    if #diag<l then error("image does not have full rank")
    elif abs(product(diag))!=1 then error("image is a proper sublattice")
    fi
  { now since every element of diag is $\pm1$, division is multiplication;
    so L*A*R has right-inv cols<l(I_r)*D_l; conjugate identity by L^-1, get: }
  in (r # for j:l do diag[j]*R[j] od) * L

set left_inverse(mat A) = mat: { for injective map to saturated sublattice }
  ^right_inverse(^A)

set weak_left_inverse(mat A) = (int,mat): { left inverse after saturation }
  let (diag,L,R) = diagonalize(A) then r = #diag then less_r = (int j):j<r
  in ( product(diag), columns_with(less_r,R) * rows_with(less_r,L) )

set reduce (mat M) = { factor out common divisor } mat:
  let inf=inv_fact(M) in if =#inf then M else M\inf[0] fi

{vec:v=[a_1,...,a_n] 
 defines a permutation \sigma(i)=a_i 
 (a_1,...,a_n must be a permutation of [1,...,n])
 permutation(vec v)=matrix P which acts 
 on the left, permuting the coordinates by \sigma, 
 i.e. P(e_i)=e_{sigma(i)} where e_i is the i^th standard basis vector
 NB: this means there is an inverse here:
 P*[x_1,...,x_n]=[x_{sigma^{-1}}(1),...,x_{sigma^{-1}(n)}]
}

{standard basis vector e_i of length n}
set e(int n,int i)=let v=null(n) in v[i]:=1;v

{v is a permutation of [1,...,n]}
set permutation_matrix(vec v)=mat:let n=#v in  for i:n do e(n,v[i]-1) od


