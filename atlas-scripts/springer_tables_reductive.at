<basic.at
<springer_tables.at
<simple_character_table.at

<springer_table_A.at
<springer_table_BC.at
<springer_table_D.at
<springer_table_F.at
<springer_table_G.at
<springer_table_E6.at
<springer_table_E7.at
<springer_table_E8.at
<springer_table_torus.at

{previously the character tables were constructed from a possibly
different root datum from the given one (same up to isogeny)}
set springer_table_simple(RootDatum rd) = SpringerTable:
let (letter,n)=simple_type(rd) in
if letter="A" then
 springer_table_A(character_table(rd))
elif letter="B" then
 springer_table_B(character_table(rd))
elif letter="C" then
 springer_table_C(character_table(rd))
elif letter="D" then
 springer_table_D(character_table(rd))
elif letter="F" then
 springer_table_F4(character_table(rd))
elif letter="G" then
 springer_table_G2()
elif letter="E" and n=6 then
{ let ct=character_table_E6() in}
 springer_table_E6(character_table(rd))
elif letter="E" and n=7 then
 springer_table_E7(character_table(rd))
elif letter="E" and n=8 then
 springer_table_E8(character_table(rd))
elif is_abelian(rd) then
  springer_table_torus(rd)
else error("case not covered")
fi

set springer_table(RootDatum rd)=
if rd.is_abelian then springer_table_torus(rd) else
let factors=simple_factors(rd) then
st=springer_table_simple(factors[0].derived) in
for i:#factors-1 from 1 do
 st:=tensor(st,springer_table_simple(factors[i].derived)) od;st fi


