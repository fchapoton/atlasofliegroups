<nilpotent_orbits.at
<character_tables.at
<character_table_C.at

set_type D_Orbit = (Partition,bool)
 {all even parts have even multiplicity
  bool is true except if all parts of partition are even, in which case
  bool can be true or false
  }

{get actual conjugacy class representatives, i.e. elements of W(D_n),
 from pairs or triples of partitions
get these from type BC_n: construct w in W(BC_n) -> matrix -> w in W(D_n)
NOTE: roles of (P,Q) are switched here
in type C:
P=(a_1,...,a_r) -> coxeter element of Sp(2a_1)x...xSp(2a_r)
Q=(b_1,...,b_s) -> coxeter element of GL(b_1)x...xGL(b_s)
in type D:
to lie in type D, s must be even:
P=(a_1,...,a_r) -> coxeter element of GL(a_1)x...xGL(a_r)
Q=(b_1,...,b_s) -> coxeter element of O(2b_1)x...xO(2b_s)
the "coxeter element" of O(2b) comes from Sp(2b), and has determinant -1
=>cneed s to be even
}
set conjugacy_class_D(D_class cl)=
if not cl.is_split then
 let (P,Q)=cl.unsplit_class in
 if #P+#Q=0
  then id_W(trivial_group)  {special case}
 else
  let rd=SO(2*(sum(P)+sum(Q))) then
  M=conjugacy_class_C(Q,P {note switch here}).matrix in W_elt(rd,M)
 fi
else
 let (P,Bool)=cl.split_class then
 rd=SO(2*sum(P)) then
  M=conjugacy_class_C([int]:[],P).matrix in 
  if Bool then W_elt(rd,M) else
   let delta=distinguished_involution(inner_class(rd,"u")) in
   W_elt(rd, delta*M*delta)
 fi
fi

{all irreducible representations of D_n}
set D_irreps (int n) = [D_irrep]:
let unsplit=
##
for (lambda,mu) in partition_pairs(n)
  do if lambda !=mu and leq_partitions(mu,lambda) then [(lambda,mu).unsplit_irr] else [] fi
od then
(s,r)=n\%2 then
split=
##
if !=r then []
else
for lambda in partitions(s)
   do [(false,lambda).split_irr,(true,lambda).split_irr]
  od
fi
in unsplit##split

{conjugacy classes in type D:
pair of partitions (P,Q)
#P+#Q=n
P\ne Q
number of parts of Q is even
union
(P,false),(P,true)
where #P=n, P is very even
}
set D_classes(int n)=[D_class]:
##for (P,Q):pair in partition_pairs(n) do
 if not is_even(#Q) then [D_class]:[] 
 elif !=Q or not is_very_even(P) then [(P,Q).unsplit_class] 
 else [(P,true).split_class,(P,false).split_class]
 fi
od

{make a character table of type D}
set character_table_D(int n) = CharacterTable:
let order=n.fac*2^(n-1) then
classes = D_classes(n) then
cycles = for class in classes do cycles(class) od then
ncc=#cycles then
index = index_D_classes(classes) then
centralizer_orders = for type in cycles do type.centralizer_order od then
reps=D_irreps(n)  then
sign(bool s) = string: if s then "-" else "+" fi
in
  (Lie_type(SO(2*n))    {lie_type}
  , order    {order (of W)}
  , ncc      {n_classes}
  , (int j) classical_class: classes[j].class_D
  , (int j) string: { class_label }  classes[j].D_class_string
  , (int j) WeylElt: conjugacy_class_D(classes[j])  {class_rep}
  , (int j) int: cycles[j].cycle_type_order       {class_order}
  , (int j, int p) int: class(cycle_power(cycles[j],p)).index   {class_power}
  , centralizer_orders   {class}
  , for co in centralizer_orders do order\co od    {class_sizes}
  , (int i) classical_irrep: reps[i].irrep_D
  , (int i) string: reps[i].D_irrep_string { irreducible representation label }  {irreducible label}
  , [[int]]:[] {sym_powers_reflection}
  , [int]:[]  {degrees}
    {character table:}
  , for cl in D_classes(n) do
     for pi in reps do character(pi,cl)
     od
    od
  )
