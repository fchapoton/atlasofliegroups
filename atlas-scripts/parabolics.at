<kgp.at { for type Parabolic }
<Weylgroup.at
<misc.at { generate_all_subsets }

{   topics addresses in this script:
  complex parabolics and Levi factors
  parabolics with theta-stable Levi factor
  theta-stable parabolics
  real parabolics
}

{ ComplexParabolic data type: each value describes a
  G-conjugacy class of parabolic subgroups of complex group
  (RootDatum rd,[int] S) <->
  G-conjugacy class of standard parabolic with Levi factor given by
  subset S of simple roots
}

: ComplexParabolic = (RootDatum,[int])

{ see kgp.at, a K-conjugacy class of parabolics is given by the Parbolic
  data type ([int] S,KGBElt x) }

set complex_parabolic (Parabolic(S,x)) = ComplexParabolic: (root_datum(x),S)

{ root datum of the complex Levi factor }
set complex_Levi (RootDatum rd, (int->bool) select) = RootDatum:
  root_datum(columns_with(select,  simple_roots(rd))
            ,columns_with(select,simple_coroots(rd)))
set complex_Levi (RootDatum rd,[int] S) = complex_Levi(rd,is_member(S))

{ test if complex Levi defined by set of simple roots S is theta_x stable
  algorithm: H=sum of fundamental coweights with index not in S,
  test whether <theta_x(alpha),H>=0 for all alpha in S
}
set is_Levi_theta_stable (Parabolic (S,x)) = bool:
  let G=root_datum(x)
  then H = { coweight measuring level of roots alpha[t] not in the Levi factor }
    let sum= ratvec: null(rank(G)) in
    for t in complement(semisimple_rank(G),S)
    do sum + := fundamental_coweight(G,t) od; sum
  , theta=involution(x)
  , alpha=simple_roots(G)
  in all(for s in S do = H*(theta*alpha[s]) od)

{ make a real Levi factor from P=(S,x),
  the complex Levi of S must be theta_x-stable }
set Levi (Parabolic(S,x):P) = RealForm:
  assert(is_Levi_theta_stable(P),"Levi factor is not theta-stable");
  let x_min=x_min(P)
  then ic_Levi=inner_class(complex_Levi(root_datum(x),S),involution(x_min))
  in real_form(ic_Levi,involution(x_min),torus_factor(x_min))

{ test if parabolic P=(S,x) is theta-stable: <=>
  1) L is theta-stable
  2) y is closed
  3) alpha simple, not in S => alpha is imaginary or C+ wrt maximal(P)
}
set is_parabolic_theta_stable (Parabolic (S,x):P) = bool:
  is_Levi_theta_stable(P) and
  is_closed(P) and
  ( let x_max=maximal(P) in
    none(for j in complement(semisimple_rank(root_datum(x)),S)
         do is_strict_descent(j,x_max) { C- or real }
         od)
  )

{ test if parabolic P=(S,x) is real: <=>:
  1) L is theta-stable
  2) y is open
  3) alpha simple, not in S => alpha is real or C- wrt a maximal element of P
}
set is_parabolic_real(Parabolic (S,x):P) = bool:
  is_Levi_theta_stable(P) and
  is_open(P) and
  ( let x_max=maximal(P) in
    all(for j in complement(semisimple_rank(root_datum(x)),S)
        do is_strict_descent(j,x_max) { C- or real }
        od)
  )

{------------  unipotent radical of P ------------------}
{ see K.pdf, Section 4
  P=(S,x)
  if x=x_0:=KGB(G,0) then P is the standard parabolic P_S with simple roots S,
  and nilrad(P) is contained in the basic Borel
  in general P=(S,x) -> gP_Sg^{-1} where gxg^{-1}=x_0
  if the G-orbit of P is closed, equivalently if L contains the fundamental
  Cartan, then we can replace x with x=x_min(P) which is on the fundamental
  Cartan and then find w so that w*x=x_0
}


set rho_u (Parabolic P) = ratvec: rho(real_form(P)) - rho(Levi(P))
set rho_l (Parabolic P) = ratvec: rho(Levi(P))

set nilrad (Parabolic P) = mat: { columns are coweights, in fact poscoroots }
  let rd=root_datum(P), rho_u=rho_u(P)
  in columns_with((vec alpha_v) bool: > alpha_v*rho_u ,poscoroots(rd))

set nilrad_roots (Parabolic P) = mat: { columns are posroots }
  let rd=root_datum(P), nil_coroots = nilrad(P) in
  if =nil_coroots then nil_coroots { empty matrix is self_dual }
  else { convert non-empty set of coroots }
    for alpha_v in nil_coroots do root(rd,alpha_v) od
  fi

{ ----------------- alternative method to define a parabolic --------------- }
{ it is convenient to be able to define a parabolic in terms of a semisimple
  element either in \h or \h^*
}

{ by default: lambda is in \h^*, a rational weight }
set zero_simple_coroots (RootDatum rd, vec lambda) = [int]:
  let result = [int]:[] in
  for alpha_v@j in simple_coroots(rd)
  do if alpha_v*lambda=0 then result #:= j fi od; result

set parabolic (ratvec lambda,KGBElt x) = Parabolic:
  let rd=root_datum(x) then (lambda_dom,w)=make_dominant(rd,numer(lambda)) in
  Parabolic:(zero_simple_coroots(rd,lambda_dom), cross(inverse(w),x))

set Levi (ratvec lambda,KGBElt x) = RealForm: Levi(parabolic(lambda,x))
set nilrad (ratvec lambda,KGBElt x) = mat: nilrad(parabolic(lambda,x))
set nilrad_roots (ratvec lambda,KGBElt x) = mat:
  nilrad_roots(parabolic(lambda,x))
set rho_u (ratvec lambda,KGBElt x) = ratvec: sum(nilrad_roots(lambda,x)) / 2

{ alternatively, H is in \h, a rational coweight }
set zero_simple_roots(RootDatum rd, vec cowt) = [int]:
  let result = [int]:[] in
  for alpha@j in simple_roots(rd)
  do if cowt*alpha=0 then result #:= j fi od; result

set parabolic_alt (ratvec H,KGBElt x) = Parabolic:
  let rd=root_datum(x) then (H_dom,w)=dual_make_dominant(rd,numer(H)) in
  Parabolic:(zero_simple_roots(rd,H_dom), cross(inverse(w),x))

set Levi_alt (ratvec H,KGBElt x) = RealForm: Levi(parabolic_alt(H,x))
set nilrad_alt (ratvec H,KGBElt x) = mat: nilrad(parabolic_alt(H,x))
set nilrad_roots_alt (ratvec H,KGBElt x) = mat:
  nilrad_roots(parabolic_alt(H,x))
set rho_u_alt (ratvec H,KGBElt x)= ratvec: sum(nilrad_roots_alt(H,x)) /2
set rho_Levi_alt (ratvec H,KGBElt x) = ratvec: rho(Levi_alt(H,x))



{ ----------------------(real) cuspidal parabolics------------------- }

{ real_parabolic(x) has Levi factor M=centralizer(A)
  u=positive roots not in M
  for this to be stable: no C+ roots
  => real roots alpha are those satisfying <(1-theta_x)rho,\alpha^\vee>=0
}
set real_parabolic (KGBElt x) = Parabolic:
  assert(no_Cplus_roots(x),"x has some C+ roots");
  parabolic((1-involution(x))*rho(root_datum(x)),x)

{ ---------------------theta-stable split parabolics---------------- }

{ theta_stable_parabolic(x) has Levi factor L=centralizer(T)
  u=positive roots not in M
  for this to be stable: no C- roots
  => imaginary roots alpha are those satisfying <(1+theta_x)rho,\alpha^\vee>=0
}
set theta_stable_parabolic (KGBElt x) = Parabolic:
  assert(no_Cminus_roots(x),"x has some C- roots");
  parabolic((1+involution(x))*rho(root_datum(x)),x)

{ ------------------Levi factor of real parabolic----------- }

{ M=centralizer of A in H=TA, as a RealForm (cuspidal parabolic) }
set real_Levi(KGBElt x) = RealForm:
  let theta = involution(x)
  then ic_M =
    inner_class(root_datum(simple_from_positive(imaginary_sys(x))),theta)
  in { construct synthetic } real_form(ic_M,theta,torus_factor(x))

{ (begin comment)
{ Levi factors of general real parabolic }

{ Real Levi defined by set of root indices for its simple system, and x }
set real_Levi_from_simple(
    RealForm G,[int] simpleroot_numbers,KGBElt x,bool show) =  RealForm:
  let theta = involution(x), rd=RootDatum: G
  then roots = rank(rd) # for i in simpleroot_numbers do root(rd,i) od
  , coroots  = rank(rd) # for i in simpleroot_numbers do coroot(rd,i) od
  then new_rd = root_datum(
       	      	  if show then print(roots,coroots) else (roots,coroots) fi)
  in real_form(inner_class(new_rd,theta),theta,torus_factor(x))

set real_Levi_from_simple(RealForm G,[int] inx,KGBElt x) = RealForm:
  real_Levi_from_simple(G,inx,x,false)

{ Real Levi defined by set of root indices for its positive system, and x }
set real_Levi_from_positive(
  RealForm G,[int] posroot_numbers,KGBElt x, bool show) = RealForm:
  let theta = involution(x), rd=RootDatum: G
  then roots = rank(rd) # for i in posroot_numbers do root(rd,i) od
  , coroots  = rank(rd) # for i in posroot_numbers do coroot(rd,i) od
  then new_rd = root_datum(simple_from_positive(
              	  if show then print(roots,coroots) else (roots,coroots) fi))
  in real_form(inner_class(new_rd,theta),theta,torus_factor(x))

set real_Levi_from_positive(RealForm G,[int] inx,KGBElt x) = RealForm:
  real_Levi_from_positive(G,inx,x,false)

{ M=centralizer of (1-theta_x)v }
set real_Levi (KGBElt x,ratvec v) = RealForm:
  let theta=involution(x) then w=(1-theta)*v, rd=RootDatum:real_form(x)
  then poscoroots = columns_with( (vec alphav): =alphav*w, poscoroots(rd))
  then posroots = rank(rd) # for alphav in poscoroots do root(rd,alphav) od
  then rd_M=root_datum(simple_from_positive(posroots,poscoroots))
  in real_form(inner_class(rd_M,theta),theta,torus_factor(x))

set theta_stable_Levi (KGBElt x) = RealForm:
  let ic_L=inner_class(root_datum(simple_from_positive(real_sys(x)))
		      ,involution(x)) in quasisplit_form(ic_L)
{
set M = real_Levi@KGBElt { synonym }
set L = theta_stable_Levi@KGBElt { synonym }
}
(end comment  ---}

{ -------------- auxiliary routines------------------}

{list of K-conjugacy classes of given ComplexParabolic}
set KGP (RealForm G,ComplexParabolic (rd,S)) = [KGPElt]:
  for x in maxima_in_partial_order(G,S) do KGPElt:(S,x) od
set parabolics (RealForm G,ComplexParabolic (rd,S)) = [Parabolic]:
  for x in maxima_in_partial_order(G,S) do Parabolic:(S,x) od

set theta_stable_parabolics (RealForm G,ComplexParabolic P) = [Parabolic]:
  let result=[Parabolic]:[] in
  for Q in parabolics(G,P)
  do if is_parabolic_theta_stable(Q) then result#:=Q fi od; result

set theta_stable_parabolics (RealForm G) = [Parabolic]:
  let result=[Parabolic]:[] in
  for S in power_set(semisimple_rank(G))
  do result #:= theta_stable_parabolics(G,ComplexParabolic:(G,S))
  od; result


set theta_stable_parabolics_type (RealForm G,[int] P) = [Parabolic]:
  let result=[Parabolic]:[] in
  for (Q,y) in theta_stable_parabolics(G) do if Q=P then result#:=(Q,y) fi od;
  result


set print_theta_stable_parabolics (RealForm G) = void:
  let all = theta_stable_parabolics(G) in
  for (S,x):P in all do prints("S=", S, " L= ", Levi(P), "  x=",x) od;
  prints("Total: ",#all)

