<basic.at
<sort.at
<K.at
<Weylgroup.at { for make_no_Cminus }

{ See top of K.at for some notation }
{ Three ways of parametrizing K-types:

1. K_Type:(KGBElt x,ratvec lambda)
  representating a final, non-zero, standard limit module
  these are in bijection with K-hat
  lambda\in X^*+rho
  requirements:
  standard: <lambda,alpha^vee>>=0 (alpha imaginary)
  final: <lambda+rho_r,alpha^vee> even (alpha real)
  nonzero: <lambda,alpha^vee>=0, alpha imaginary-simple => alpha is non-compact

2. KHighestWeight: (KGBElt x_K,vec mu)
  x_K in distinguised fiber defines K
  recall (see K.at) T_K=H^\delta is abelian subgroup of K_#
  mu\in X^*, viewed as element of X^*/(1-delta)X^*=X^*(T_K) (T_K can be disconnected)
    is a highest weight for K_#=T_K.K_0
  equivalence includes modding out by (1-delta)X^*, see function = below

3. K0_Param: ordinary parameter (x_K,lambda,nu=0) for
   irreducible finite dimensional representation of K_0
   its highest weight is a dominant weight of T_K0
}
: K_Type = (KGBElt,ratvec)
: K_Type_Pol = ParamPol { re-use this type, with nu-part of the terms zero }
: KHighestWeight = (KGBElt,vec)

set x (K_Type p) =      KGBElt: let (x,)=p in x
set lambda (K_Type p) = ratvec: let (,lambda)=p in lambda

set root_datum (K_Type p) = root_datum(x(p))
set real_form (K_Type p)  = real_form(x(p))
set real_form (KHighestWeight (x,mu))  = real_form(x)
set K_0(KHighestWeight (x,))=K_0(x)

set dlambda (K_Type p) = ratvec: (1+involution(x(p)))*lambda(p)/2
set dlambda (Param p)  = ratvec: (1+involution(x(p)))*lambda(p)/2

set K_type (Param p) = K_Type:
  assert(=nu(p),"nu(p) is not zero"); (x(p),lambda(p))
set parameter (K_Type p) = Param:
  parameter(x(p),lambda(p),null(rank(root_datum(x(p)))))

{ equality of K_Types is now taken care of by equality of Param values }
set = (K_Type p,K_Type q) = bool: parameter(p)=parameter(q)

set make_no_Cminus(K_Type p)=K_Type:K_type(make_no_Cminus(parameter(p)))

{ --------------length of K-types------------------ }

{ length of K-type with highest weight mu is <mu+2*rho_K,mu+2*rho_K>
  used in definition of lowest K-types
}

set length(KHighestWeight (x,mu))=rat:
let rd=root_datum(K_0(x)) then
shift=2*rho(rd) in nondegenerate_invariant_form(rd,mu+shift,mu+shift)









