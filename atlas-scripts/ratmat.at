{ implement type ratmat that makes linear algebra over Q possible }

<basic.at

: ratmat = (mat,int,void) { matrix and common denominator }
{ the void component avoids unary/binary conflicts, as for -@(mat,int) }

set gcd(mat M) = int:
  let invf=inv_fact(M) in if =invf then 1 else invf[0] fi

set simplify(ratmat(M,d,)) = ratmat:
  let g=gcd([gcd(M),d]) in (M\g,d\g,())

set columns (ratmat(M,d,)) = [ratvec]: for c in M do c/d od
set rows (ratmat(M,d,)) = [ratvec]: for c in ^M do c/d od
set column (ratmat(M,d,),int j) = ratvec: M[j]/d
set row (ratmat(M,d,),int i)    = ratvec: (^M)[i]/d

set ^ (ratmat(M,d,)) = ratmat: (^M,d,()) { transpose }

set + (ratmat(M,d,),ratmat(MM,dd,)) = ratmat: simplify(dd*M+d*MM,d*dd,())
set - (ratmat(M,d,),ratmat(MM,dd,)) = ratmat: simplify(dd*M-d*MM,d*dd,())
set - (ratmat(M,d,)) = (-M,d,())

set * (ratvec v,ratmat(M,d,)) = ratvec: v*M/d
set * (ratmat(M,d,),ratvec v) = ratvec: M*v/d

set * (ratmat(M,d,),mat MM) = ratmat: simplify(M*MM,d,())
set * (mat M,ratmat(MM,d,)) = ratmat: simplify(M*MM,d,())
set * (ratmat(M,d,),ratmat(MM,dd,)) = ratmat: simplify(M*MM,d*dd,())

{
{ rational matrix [ratvec]: [column_1,...,column_n] }

{ convert rational matrix to
  (mat,[int]):(matrix of numerators,vector of denominators)
}
set int_matrix ([ratvec] S) = (mat,[int]):
 ( for i:#S do numer(S[i]) od
 , for i:#S do denom(S[i]) od )

{ multiply integer matrix times rational matrix }
set * (mat M,[ratvec] S) = [ratvec]:
  let (T,d)=int_matrix(S) then A=M*T in
  for i:#S do numer(A[i])/d[i] od

{ transpose of rational matrix }
set ^ ([ratvec] S) = [ratvec]:
  if #S=0 or #S[0]=0 then []
  else for i:#S[0] do for j:#S do S[j][i] od od
  fi

{ multiply rational matrix times integer matrix }
set *([ratvec] S,mat M) = [ratvec]: ^(^M*^S)

set is_integer_matrix ([ratvec] S) = bool:
  all( for v in S do is_integer(v) od )
}