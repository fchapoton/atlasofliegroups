<basic.at
<combinatorics.at { for |partition_pairs|, |pairs_of_total_sum| }
<character_tables.at
<classical_W_classes_and_reps.at { for type abbreviation |BC_class|, |cycles| }

set sign_string (bool s) = string: if s then "-" else "+" fi
set parts_string (Partition lambda) = string: { partition without brackets }
  lambda.to_string[1:1~]
{ |cycles@(Partition,Partition)| tacks booleans one cycle lengths, the do this: }
set cycles_string ([int,bool] cycles) = string:
(  "[" ##
   for (l,s)@pos in cycles
   do if =pos then l.to_string##s.sign_string
      else "," ##  l.to_string##s.sign_string
      fi
   od.##
   ##  "]"
)

{     type C     }

set BC_classes(int n) = [BC_class]:
   for PQ in partition_pairs(n) do to_cycles(PQ) od

{ word representative in types B and C of conjugacy class for partition pair;
  the parts of P correspond to are cycles without flip, those of Q with flip }
set class_word_BC(Partition P,Partition Q) = [int]:
(  assert((P:=P.strip_to_partition).>, "P is not a partition")
;  assert((Q:=Q.strip_to_partition).>, "Q is not a partition")
;  let nP=sum(P), nQ=sum(Q)
   ,  Pbars = let sum=minus_1 in for p in P do sum+:=p od
   ,  Qbars = let sum=minus_1 in for q in Q do sum+:=q od
then  P_gens = complement(nP,Pbars) { for P part, do the same as in type A }
   ,  Q_gens = { each cycle from Q gets a sign flip when its end is sensed }
      for i:nQ
      do let pos=nP+i { position in [0,n) where we are }
      in if isnt_member(Qbars)(i) then [pos] { extend our cycle }
         else { tack on a sign flip at the final element of the cycle }
	    for j:nQ-i from pos do j od## for j:nQ-i-1 from pos do j ~od
	 fi
      od.##
in P_gens##Q_gens
)

set conjugacy_class_C(BC_class cycles) = WeylElt:
   let n=cycles.rank in W_elt(Sp(2*n),class_word_BC(cycles.to_partition_pair))

set BC_irreps(int n) = [BC_irrep]:
   pairs_of_total_sum(n,(int k):partitions(k)~[:]) { list [k],..,ones(k) }

set character_table_C(int n) = CharacterTable:
   let class_list =  BC_classes(n)
   then classes = [WeylElt,classical_class,string]:
      for cycles in class_list
      do (conjugacy_class_C(cycles), cycles.class_BC,cycles.cycles_string)
      od
   ,  irreps = [classical_irrep,string,[int]]:
      for rep in BC_irreps(n)
      do ( rep.irrep_BC, rep.to_string
         , for cycles in class_list do hyperoctahedral_character(rep,cycles) od
	 )
      od
   in character_table(Sp(2*n),classes,irreps)
