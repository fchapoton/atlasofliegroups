<rho_shifts.at
<W_K.at
<thetastable.at
<LKT.at

{ see K_parameters.at
  K_types.at: K-types as final tempered limit paramters
  (x,lambda) <-> representations of K
  K_highest_weights.at: KHighestWeights (x,mu) <-> representations of K_#
}
{ KHighestWeight: mu    K_types tau
  see KHatHowe Section 4, especially Theorem 4.10
  notation:
    KHatHowe   Atlas
      T_{f0}    T_K0
      T_f       T_K=H^\delta
      T_fl      T_{K,large}

    R(K)=|K/K_#|=|T_{K,large}/T_K|

  given mu a character of T_K

  T_K \subset T_K(\mu) \subset T_{K,large}
   |-----a-------|--------b-------|
   ab=|R(K)|
   a=|R(K,mu)|,  b=|R(K)/R(K,mu)|

   {mu_i|i=1,...,b} characters of T_K  <-> {\tilde\mu_j|j=1,...,a} irreps of T_{K,large}

   {mu_i}= orbit of R(K) acting acting on mu=mu_1, stabilizer is R(K,mu)
   {\tilde\mu_j|j=1,...,a} irreducible representations of T_{K,large}

   mu_i -> Ind_{T_K}^{T_{K,large}})(mu_i)= \sum_{j=1}^a \tilde\mu_j
   \tilde\mu_j -> Res^{T_{K,large}}_{T_K}(\tilde\mu_j)=\sum_{i=1}^a\mu_i

   mu_i -> a choices of extension to T_K(mu_i) -> induce irreducibly to T_{K,large}
     each mu_i (i=1,...,a) -> same set of \tilde\mu_j (j=1,...,b)
   dim(\tilde\mu_j)=|R(K)/R(K,mu)|
   mu_i -> tau(mu_i) irreducible of K_#, dimension given by Weyl dimension formula
   \tilde\mu_j -> \tau(\tilde\mu_j) irreducible of K
   dim(\tau(\tilde\mu_j))=dim(\tau(\mu_j))*b=dim(\tau(\mu_j))|R(K)/R(K,mu_j)| (See Theorem 4.10(1))
}

{ main functions in this file:
  highest_weights@K_Type -> [KHighestWeight]
  highest_weight@K_Type -> KHighestWeight  (first one in previous function)
}

{equality of KHighestWeights}
set = (KHighestWeight (x,mu), KHighestWeight (y,tau)) = bool:
  real_form(x)=real_form(y) and
  (let x_0=KGB(real_form(x),0) then
  (,mu_0)=move_weight((x,mu),x_0) then
  (,tau_0)=move_weight((y,tau),x_0) then
  K_0=K_0(x_0) then
  mu_1=project_K(x_0,mu_0) then   {element of X^*(T_{K_0})}
  tau_1=project_K(x_0,tau_0) then {element of X^*(T_{K_0})}
{  (mu_2,w_mu2,y_mu2,)=make_strongly_dominant(x_0,mu_1) then
  (tau_2,w_tau2,y_tau2,)=make_strongly_dominant(x_0,tau_1)
}
  (mu_2,w_mu2)=make_dominant(K_0,mu_1) then
  (tau_2,w_tau2)=make_dominant(K_0,tau_1)
  in mu_2=tau_2 and
{ lift action of w up to H, and then compare projection of
  w\mu and \tau to X^*(H^\delta)=X^*/(1-delta)X^* }
  ( let m_w_mu2=lift_action(x,w_mu2) then
    m_G_mu_2=lift_action(x,w_mu2){*w_matrix(y_mu2)} then
    m_G_tau_2=lift_action(x,w_tau2){*w_matrix(y_tau2)} then
    mu_3=m_G_mu_2*mu_0 then
    tau_3=m_G_tau_2*tau_0
    in
 { if LKT_verbose then
   prints("m_G_mu_2:", m_G_mu_2);
   prints("m_G_tau_2:", m_G_tau_2);
   prints("mu_0: ", mu_0, " tau_0 :", tau_0);
   prints("mu_1: ", mu_1, " tau_1 :", tau_1);
   prints("mu_2: ", mu_2, " tau_2 :", tau_2);
   prints("mu_3: ", mu_3, " tau_3 :", tau_3) fi in
}
   in_lattice((1-involution(x_0)),mu_3-tau_3)
))

{---------------- map from K_types to KHighestWeights ----------------}
{
(x,lambda) -> {(x_K,mu)} multivalued,
               (x_K,mu) is one value, then take the R(K)-orbit <-> R(K)/R(K,mu)

algorithm:
1) if G is relatively split, Cartan is (relatively) split, all roots in the
   tau-invariant,
   this is the "G-spherical" case of KHatHowe, section 8
2) if p is final standard limit tempered, it has a unique LKT,
   use theta_stable_data to write p as cohomologically induced from a
   relatively split L
3) apply 2) to all terms of finalize(p*0)
}

set is_split_spherical(Param p)=bool:
  assert(is_final(p), "parameter is not final");
  is_relatively_split(real_form(p)) and
  #x(p) = KGB_size(real_form(p))-1 and
  all(for alpha_check in simple_coroots(root_datum(p))
      do is_even(rat_as_int( (lambda(p)-rho(root_datum(p))) *alpha_check))
      od)

set is_split_spherical(K_Type p)=bool:
   is_split_spherical(parameter(p))

{highest weight in split spherical case is unique}
set highest_weight_split_spherical(K_Type p)=KHighestWeight:
  assert(is_split_spherical(p), "p is not a spherical rep of a split group");
  let x=x(p) then x_K=canonical_x_K(x)
  then i_rd=root_datum(simple_from_positive(imaginary_sys(x_K)))
  , lambda=lambda(p)
  then rd=i_rd
  then fw=fundamental_weights(rd), mu=ratvec:lambda(p)-rho(rd)
  in { prints("mu=", mu); }
  for alpha_check@i in simple_coroots(rd) do mu-:=mu*alpha_check*fw[i] od;
{ prints("mu modified=", mu); }
  assert(all(for alpha_check in simple_coroots(rd) do mu*alpha_check=0 od)
        ,"error, mu isn't orthogonal to all roots");
  (KGB(real_form(x),0),ratvec_as_vec(mu))

set highest_weight_split_spherical (Param p) = KHighestWeight:
  highest_weight_split_spherical(K_type(p*0))
set highest_weight_split_spherical (K_Type p,KGBElt x_K) = KHighestWeight:
  let (x,mu)=highest_weight_split_spherical(p) in move_weight((x,mu),x_K)
set highest_weight_split_spherical (Param p,KGBElt x_K) = KHighestWeight:
  let (x,mu)=highest_weight_split_spherical(p) in move_weight((x,mu),x_K)


{
this is an internal function, generally should not be called directly
returns a single KHighestWeight, used in highest_weights@K_type
}
set highest_weight_one (K_Type p) = KHighestWeight:
  assert(is_final(parameter(p)),"parameter is not final");
  let p=make_no_Cminus(p)
  then (Q,pL)=theta_stable_data(parameter(p))
  then (x_L,mu_L)=highest_weight_split_spherical(pL)
  then x_G=canonical_x_K(x(p))
  then mu_G=mu_L+two_rho_u_cap_s(Q)
{ need version of 2*rho_u_cap_s(Q) which is integral, see thetastable.at}
{ this might be a ratvec, denominator 1/2, by restriction it defines a character  of T_{K_0}
  need to replace mu_G\in 1/2X^*theta with mu_G_integral\in X^*
  so that restriction takes mu_G_integral to mu_G restricted to T_{K_0}
}
{ then ()=prints("mu_L:",mu_L,new_line, " mu_G", mu_G, new_line,"2*rho_u_cap_s(Q)", 2*rho_u_cap_s(Q), new_line, "two_rho_u_cap_s", two_rho_u_cap_s(Q)) }
in (x_G,mu_G)
set highest_weight_one (K_Type p,KGBElt x_K) = KHighestWeight:move_weight(highest_weight_one(p),x_K)

{primary multi-valued function K_type -> [KHighestWeight]
number of terms is |R(K)/R(K,mu)|
}
set highest_weights (K_Type p) = [KHighestWeight]:R_K_dom_mu_orbit(highest_weight_one(p))
set highest_weights (K_Type p,KGBElt x_K) = [KHighestWeight]:[KHighestWeight]:R_K_dom_mu_orbit(highest_weight_one(p))

{highest_weights(Param p)= union over mu\in LKTs(p) of highest_weights(mu)}
set highest_weights (Param p) = [KHighestWeight]:
  let result=[KHighestWeight]: [] in
  for q in LKTs(p) do result#:=highest_weights(q) od;
  result

set highest_weights (Param p,KGBElt x_K) = [KHighestWeight]:for (x,mu) in highest_weights(p) do move_weight((x,mu),x_K) od


{return single highest weight if it is unique}
set highest_weight (K_Type p) = KHighestWeight:
  let hwts=highest_weights(p) in
  assert(#hwts=1,"highest weight it not unique, use highest_weights instead");
  hwts[0]

set highest_weight (Param p) = KHighestWeight:
  let hws=highest_weights(p) in
  assert(#hws=1,"highest weight it not unique, use highest_weights instead");
  hws[0]




{ -----------------KHighestWeight to K_types------------------ }

{ -----------------------Vogan algorithm--------------------- }

{ project vector mu on dominant cone (spanned by fundamental coweights)
  algorithm from KHatHowe Section 13, modification of BGB Proposition 5.3.3
  used in map from highest weights to LKT below
}

set centralizer(KGBElt x,ratvec v) = (KGBElt,RootDatum):
  assert(v*involution(x)=v, "v is not theta-stable");
  let rd=root_datum(x)
  then roots = columns_with((vec alpha): =alpha*v, posroots(rd))
  then coroots = rank(rd) # for alpha in roots do coroot(rd,alpha) od
  then subrd = root_datum(simple_from_positive(roots,coroots))
  in (KGB_elt(subrd,involution(x),torus_factor(x)),subrd)

set find_nci_root (KGBElt x,ratvec tau) = int:
  let ()=prints("find nci_root with x=", x,  " tau=", tau) in
  let rd=root_datum(x)
  then sr=simple_roots(rd), scr=simple_coroots(rd),ssr=ss_rank(rd)
  then j= first(ssr, (int i)bool: scr[i]*tau<0 and is_noncompact_imaginary(x)(sr[i]) )
  in
  if j>=0 then j
  else j:=
    first(ssr
         , (int i)bool:
            scr[i]*tau<0 and
            is_complex(i,x) and {<alpha,theta(alpha^vee)>=-1}
            scr[i]*involution(x)*sr[i] = -1 and
            is_noncompact(x)( (1+involution(x))*sr[i] ) { why is that a root? }
         )
  ; prints("j=",j);assert(>=j,"error in find_nci_root")
  ; root_index(rd,sr[j]+involution(x)*sr[j])
  fi

{(x,mu) is a KHighestWeight (see top of this file)
 x in the distinguished fiber, theta_x=delta
 mu\in X^*, viewed modulo (1-delta)X^*
in (X^*)^delta project it to X^*(T_K0) where T_K0=identity component of H^delta}
{(x,mu) equivalent to (wx,w\mu) so WLOG mu is G-dominant}

{This is the Vogan algorithm, version in khatHowe Section 13,
which is a slight modification of BGB Proposition 5.3.3
given (x,mu) -> mu+2rho_K(x) ->
   choose positive chamber for G -> mu+2rho_K(x)-rho
 project on given dominant chamber
 returns (x,mu_2rho_K(x)-rho,tau) where tau is dominant
     need the second argument for the modified Vogan algorithm
 }
set project_on_dominant_cone (KGBElt x, ratvec mu) = (KGBElt,ratvec,ratvec):
{let ()=prints("project_on_dominant_cone with x=", x, " mu=", mu) in}
let rd=root_datum(x) then
mu=(1+involution(x))*mu/2 then
(mu_1,w)=make_dominant(rd,mu) then
x_1=cross(inverse(w),x) then
{x_1=x then
mu_1=mu then}
{()=prints("mu:", mu);
prints("x: ", x);
prints("mu_1:", mu_1);
prints("x_1: ", x_1) then
}
{ Note: tworho_K_fixed(x) (above) is in (\h^*)^theta,
  while rho_K(x) is in \t^*, need the former
}
mu_2=mu_1+tworho_K_fixed(x_1) in
{let ()=prints("mu_2:", mu_2) in}
let (,y)=make_dominant(rd,mu_2) in
let x_2=cross(inverse(y),x_1) in
{let ()=prints("y=", y) in
let ()=prints("x_2=", x_2) in}
let rho=act(y,rho(rd)) then
mu_3=mu_2-rho in
{let ()=prints("mu_3=", mu_3) in}
let rec_fun f(KGBElt x, ratvec mu_3_orig,ratvec tau)=(KGBElt,ratvec,ratvec):
let rd=root_datum(x) in
{let ()=prints();prints("f with: ", x, " ", real_form(x), " tau= ", tau) in
let ()=prints("rd:", rd) in
let ()=prints("tau=",tau) in
let ()=prints("x=",x, "on real form:", real_form(x)) in}
if is_dominant(rd,act(inverse(y),tau)) then
{(x_1,mu_3_orig,tau) else}
(cross(inverse(y),x_1),act(inverse(y),mu_3), act(inverse(y),tau)) else
let j=find_nci_root(x,tau) then
{()=prints("got root: ", j, ", ", posroots(rd)[j]) then}
{()=prints("beta=", posroots(rd)[j]) then}
new_tau=tau-poscoroots(rd)[j]*tau*posroots(rd)[j]/2 then
{()=prints("new_tau=",new_tau) then}
(sub_x,sub_rd)=centralizer(x,poscoroots(rd)[j]) in
f(sub_x,mu_3_orig,new_tau) fi in f(x_2,mu_3,mu_3)

set project_on_dominant_cone (KGBElt x, vec mu) = (KGBElt,ratvec,ratvec):
  project_on_dominant_cone(x,ratvec:mu)

{possibly multivalued, coming from G-spherical case}

{ This function is the same as basis_lambda_differential_0 in all_Kparameters.at
   List of weights representative of a set of generators of the elementary
   2-group ker(1+theta(x))/im(1-theta(x)).
characters_order_2@KGBElt
returns [v_0,...,v_k], v_i\in X^*,
the characters of H^{theta_x} with differential 0
are \sum a_i v_i with a_i=0,1 (or [] -> [0,...,0])
}
set characters_order_2 (KGBElt x) = [vec]:
let theta=involution(x) then
zero_vector=vec:null(rank(real_form(x))) {default value} then
K=kernel(1+theta) then
(r,c)=#K in
if c=0 then [vec]:[]  else let
M=in_lattice_basis(K,1-theta) in
if #M=0 then [vec]:[] else let
(A,v)=adapted_basis(M) then
B=K*A in
{prints("K=",K);
prints("A=",A);
prints("v=",v);
prints ("B=",B);}
let result=[vec]:[]
 in
 for i:#v do if v[i]=2 then result#:=B[i] fi od;
result fi fi

set all_G_spherical_same_differential (K_Type p ) = [K_Type]:
{ assert(is_split_spherical(p),
         "parameter is not spherical for a (relatively) split group"); }
let chars=characters_order_2(x(p)) then
coeffs=generate_all_binary(#chars) then
scr=simple_coroots(root_datum(p)) then
result=[K_Type]:[] in
 for v in coeffs do
 let mu=vec:null(rank(root_datum(x(p)))) in
  for j:#v do mu+:=v[j]*chars[j] od;
  if all(for alpha_check in scr do is_even(alpha_check*mu) od)
  then result#:=(x(p),lambda(p)+mu)
  fi od;result

set all_G_spherical_same_differential (Param p) = [K_Type]:
  all_G_spherical_same_differential(K_type(p*0))

{ see KHatHowe, end of Section 13
  mu-> phi=mu_2rho_c-rho-lambda
    (=lambda-mu_3_orig from project_on_dominant_cone)
 write phi is a non-negative rational combination of simple roots
 the simple roots with strictly positive coefficient give the Levi factor L,
 and q=l+u is the corresponding standard parabolic
}
set parabolic (KHighestWeight (x,mu)) = Parabolic:
  let rd=root_datum(x), (y,mu_3_orig,lambda) = project_on_dominant_cone(x,mu)
  then diff=lambda-mu_3_orig
  then S= list( (int i): fundamental_coweight(rd,i)*diff>0, ss_rank(rd))
  in Parabolic:(S,y)

{ go from KHighestWeight mu to K_types [K_Type]  mu -> [p_1,...,p_r]
  multivalued: highest_weight(p_i)=mu
 algorithm:
 1) G-spherical case: mu\in X^*/(1-delta)X^*, satisfying <mu,\alpha^\vee>=0
    for all alpha in Delta(G,T_{K_0})
See KHatHowe, Section 15
}
set fix (KHighestWeight mu,KGBElt x_Q) = KHighestWeight:
  let (x,tau)=mu then w=find_W_cross(x,x_Q) in (cross(w,x),act(w,tau))

{this function takes KHighestWeight mu -> |R(K,mu)| K_types, see top of this file}
{first replace mu with strongly dominant mu in same R_K_dom_mu orbit}
set K_types (KHighestWeight mu_in)= [K_Type]:
{  let (y,mu_3_orig,dlambda)=project_on_dominant_cone(mu) in}
  let (mu,,,)=make_strongly_dominant(mu_in) in
  let ()=prints("PASSED make_strong_dominant") in
  let  Q=parabolic(mu)  {Q is theta-stable}
  in { prints("Q=", Q); }
  assert(is_parabolic_theta_stable(Q), "Q is not theta stable");
  let x_Q=x_min(Q)
  then mu=fix(mu,x_Q)
  {then ()=prints("x_Q=", x_Q)}
  then (x,tau)=mu then
  {  then  ()=prints("fixed mu:", mu) then }
  { ()=assert(mu=fix(mu,x_Q),"error: mu\ne fix(mu)") then }
     L=Levi(Q)
  then { L is relatively split }
{ ()=prints("Q=", Q);
     prints("mu:", mu);
     prints("dlambda:", dlambda);
     prints("L=", L);
     prints("rho_u_cap_s(Q)", rho_u_cap_s(Q));
     prints("rho_l(Q)", rho_l(Q));
     prints("tau: ", tau);
     prints("arg:", tau-2*rho_u_cap_s(Q)+rho_l(Q)) then }
  ()=assert(is_relatively_split(L),"L is not relatively split") then
  pL=finalize(parameter(KGB(L,#KGB(L)-1),
	                tau-two_rho_u_cap_s(Q)+rho_l(Q), null(rank(L))))
  then
{ ()=prints("pL:", pL);
     prints("Q=:", Q) then }
     result=[K_Type]:[]
  in  assert(#pL=1,"finalized parameter has more than one term");
  let all_pL=all_G_spherical_same_differential(pL[0]) in
  for qL in all_pL
  do  {prints("qL:", qL); }
    let ind=monomials(induce_standard(parameter(qL),Q,real_form(x))) in
{    let ()=prints("induced:", ind) in}
    assert(#ind=1,"induced has more than one term");
    result#:=K_type(ind[0])
  od; result

set K_type (KHighestWeight(x,mu)) = K_Type:
  let ktypes=K_types(x,mu) in
  assert(#ktypes=1
        ,"more than one K-type maps to this KHighestWeight;" # new_line
        #"use K_types to get them all");
  ktypes[0]



{-----------------KHighestWeight to K0_param --------------------------}

set K0_highest_weight (KHighestWeight(x,mu)) = Param:
  finite_dimensional(K_0(x),project_K(real_form(x),mu))

{dimension of KHighestWeight=dimension of representation of K_#
                            =dimension of representation of K_0, given by Weyl dimension formula}
set dimension (KHighestWeight mu) = int:dimension(K0_highest_weight(mu))

set dimension (K_Type p) = int:
let hw=highest_weights(p) then
mu=hw[0] then
(x,)=mu in dimension(mu)*rat_as_int(#R_K_dom(x)/#R_K_dom_mu(mu))






{ given mu in X^*(T_K)=X^*(H)/(1-delta)X^*(H), choose representative in X^*(H)
  giving a KHighestWeight (x,mu) cannot necessarily take mu to be \delta-fixed
}

set H_weight (KGBElt x,vec mu_K) = KHighestWeight:
  (x, { vec: } mu_K*left_inverse(injection_from_K_matrix(x)) )

{ this may be a ratvec, not vec }
set fundamental_weights_K_H (KGBElt x) = [ratvec]:
  let M=left_inverse(injection_from_K_matrix(x)) in
  for v in fundamental_weights(K_0(x)) do v*M od

set K0_param (K_Type p,KGBElt x_K) = Param:
  let (,tau)=highest_weight_one(p,x_K) in
  finite_dimensional(K_0(x_K),project_K(x_K,tau))

set K0_param (K_Type p) = Param:
  K0_param(p,KGB(real_form(x(p)),0))

{
set LKTs_K0 (Param p,KGBElt x_K) = [Param]:
  for (,tau) in highest_weights(p,x_K) do finite_dimensional(K_0(x_K),tau) od
}
set K0_params (Param p,KGBElt x_K) = [Param]:
  for (,tau) in highest_weights(p,x_K)
  do finite_dimensional(K_0(x_K),project_K(x_K,tau)) od
set K0_params (Param p) = [Param]:
  K0_params(p,KGB(real_form(x(p)),0))

set K0_param (Param p,KGBElt x_K) = Param:
  let K0_prms=K0_params(p,x_K) in
  assert(#K0_prms=1,"Parameter has more than one K0 parameter, use K0_param");
  K0_prms[0]

set K0_param (Param p) = Param:
  K0_param(p,KGB(real_form(x(p)),0))

{ mu is a highest weight for K_0=identity component of K_x
  returns fundamental weight coordinates
}
set fundamental_weight_coordinates (KHighestWeight (x,mu)) = vec:
  mu*simple_coroots(K_0(x))

{ if possible, take weight of K_0, in fundamental weight coordinates, to
  KHighestWeight (x,mu) }
set K_highest_weight_from_fundamental_weights(KGBElt x,vec tau) =
    KHighestWeight:
  let K_0=K_0(x), fw=fundamental_weights_K_H(x)
  , weight=ratvec:null(ss_rank(real_form(x)))
  in for i:#tau do weight+:=tau[i]*fw[i] od;
  assert(is_integer(weight),"Weight is not integral");
  (x,ratvec_as_vec(weight))

set dimensions (Param p, KGBElt x_K) = [int]:
  for pi in K0_params(p,x_K) do dimension(pi) od
set dimensions (Param p) = [int]:   dimensions(p,KGB(real_form(p),0))
set dimensions ([Param] B)= [[int]]: for p in B do dimensions(p) od
