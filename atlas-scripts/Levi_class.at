<basic.at
<W_orbit.at
<parabolics.at

set is_W_conjugate (ratvec v, ratvec w, RootDatum rd)=bool:
   let list=W_orbit(rd,v) in  any(for y in list do y=w od)

set remove_from_set ([[int]] old_set, [[int]] rem_set)=[[int]]:
   ##for S in old_set do if none(for T in rem_set do T=S od)
   then [S] else [] fi od

set complex_parabolics (RootDatum rd) = [ComplexParabolic]:
  for S in power_set(semisimple_rank(rd)) do (rd,S) od

set complex_parabolics_S (RootDatum rd)=[[int]]:
  power_set(semisimple_rank(rd))

set choose_by_size ([[int]] list, int n)=[[int]]:
  ##for S in list do if #S=n then [S] else [] fi od

set compute_rhos ([[int]] list, RootDatum rd)=[ratvec]:
  for S in list do let P=ComplexParabolic:(rd,S) in
  rho(complex_Levi(P)) od

set conjugates_by_rho (RootDatum rd, [int] S, [[int]] list)=[[int]]:
  let rhos=compute_rhos(list,rd) in
  let P=ComplexParabolic:(rd,S) in let rhoP=rho(complex_Levi(P))
  in let orb=W_orbit(rd,rhoP) in
  ##for v@i in rhos do if any(for w in orb do v=w od) then [list[i]]
  else [] fi od

set print_conjugate_info (RootDatum rd, [[int]] S_list)=void:
   prints("Levi","         ","Lie Type");
   for S in S_list do let L=complex_Levi((rd,S)) in
   prints(S," ",Lie_type(L)) od

set group_by_conjugate_rhos (RootDatum rd,[[int]] list)=[[[int]]]:
   let result=[] in let sets=list in
   while #sets>0 do let new_set=conjugates_by_rho (rd,sets[0],sets)
   in result#:=new_set; sets:=remove_from_set (sets,new_set) od;
   result

set group_by_conjugate_rhos (RootDatum rd, int rank)=[[[int]]]:
   let list=complex_parabolics_S(rd) then
   same_size_list=choose_by_size(list,rank) in
   group_by_conjugate_rhos(rd,same_size_list)

set group_by_conjugate_rhos (RootDatum rd)=[(int,[[[int]]])]:
   for i:semisimple_rank(rd) do (i,group_by_conjugate_rhos(rd,i)) od

set print_Levis_by_conjugate_rhos (RootDatum rd)=void:
   prints ("rank  # of classes  classes");
   for i:semisimple_rank(rd) do let list=group_by_conjugate_rhos(rd,i) in
     prints(i,"        ",#list,"          ",list) od