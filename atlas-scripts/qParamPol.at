<polynomial.at

{\sum a_i(q)p_i where a_i(q) is a polynomial}

{the data type qParamPol is [ParamPol]
[P_0,P_1,..,P_n] <-> P_0+P_1*q^2+...+P_n*q^n
The advantage of the non-obvious convention is that we can use the
features of ParamPol to take care of combining terms.
See the functions rearrange and dearrange.
}
set_type qParamPol=[ParamPol]

set nullqParamPol(RealForm G)=qParamPol:[null_module(G)]

{equality is term by term}
set =(qParamPol P,qParamPol Q)=bool:
 (#P=#Q) and all(for i:#P do P[i]=Q[i] od)

set real_form(qParamPol P)=RealForm:
if #P=0 then torus(0,0,0) else P[0].real_form fi

{rearrange:
 takes qParamPol:[P_0,P_1,..,P_n] <-> P_0+P_1*q+...+P_n*q^{n-1}
 to
 (a_0+a_1q+...a_kq^k)*p_0 + (b_0+...+b_rq^r)*p_1 + ... (...)p_m
 represented by [([a_0,...,a_k],p_0),...,([...],p_m)]
 where {p_i} are the monomials of all of the {P_j}
 the coefficients are i_pols
This is a more natural way to think of a qParamPol, but less convenient
computationally.
}
set rearrange(qParamPol pols)=[(i_poly,Param)]:
for p in monomials(pols) do
 (for i:#pols do split_as_int(pols[i][p]) od,p) od


{go other way:
 given f_0(q)p_0 + ... + f_n(q) p_n, take it to [P_0,...,P_m]
[a_0+a_1q+...a_kq^k]*p_0 + [b_0+...+b_rq^r]*p_1 + ... [...]*p_n
 <->  by [([a_0,...,a_k],p_0),...,([...],p_n)] goes to 
 P_0+P_1*q^2+...+P_m*q^m, represented by
 [P_0,P_1,..,P_n]
}
set dearrange([(vec,Param)] f,RealForm G)=qParamPol:
let n=max(for (v,) in f do #v od) in
for i:n do
 sum(G,for j:#f do let (v,p)=f[j] then w=v##null(n-#v) in w[i]*p od)
od

set dearrange([(vec,Param)] f)=qParamPol:dearrange(f,let (,p)=f[0] in p.real_form)

{polynomial  in q, or constant, times qParamPol}
set *(i_poly f,qParamPol P)=qParamPol:
let r=rearrange(P) in dearrange(for (g,p) in r do (convolve(f,g),p) od)
set *(int c,qParamPol P)=qParamPol:[c]*P

set +(qParamPol P,qParamPol Q)=qParamPol:
if #P<=#Q then
 for i:#Q do if i<=#P-1 then P[i]+Q[i] else Q[i] fi od
else
 for i:#P do if i<=#Q-1 then P[i]+Q[i] else P[i] fi od
fi
set one_minus_q=[1,-1]
set -(qParamPol P,qParamPol Q)=qParamPol:P+(-1)*Q

set evaluate_at_s(qParamPol P)=ParamPol:
null_module(P.real_form) + sum(P.real_form,for i:#P do s^i*P[i] od)

{really should call this q_branch, but that would override a built-in, which 
is not a good idea}
set branch_q(Param p, int N)=qParamPol:
if p.real_form.nr_of_Cartan_classes>1 then prints("Warning: G has more than one conjugacy class of Cartan subgroups.") fi;
dearrange(q_branch(p,N))  {q_branch is built-in}

{nice output}
set show(qParamPol P)=void:
for (f,p) in rearrange(P) do prints("(",poly_format(f,"q"),")","*",p) od

{alternative output version}
set print(qParamPol P)=void:
let header=["c","x","lambda","weight","dim"] then
values=for (c,p) in rearrange(P) do
let (,x)=%p.x then
(,wt)=highest_weights(p)[0] in
[poly_format(c,"q"),x.to_string,p.lambda.to_string,wt.to_string,LKT(p).dimension.to_string]
od in tabulate(header#values,"lllll",2," ")

set print_branch_q(Param p,int N)=void:print(branch_q(p,N))





