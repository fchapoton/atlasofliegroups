<basic.at
<character_tables.at
<classical_W_classes_and_reps.at { for type abbreviation |BC_class|, |cycles| }
<character_table_C.at

set conjugacy_class_B(BC_class cycles) = WeylElt:
   let n=cycles.rank
   in W_elt(Spin(2*n+1),class_word_BC(cycles.to_partition_pair))

{     type B     }

set character_table_B(int n) = CharacterTable:
   let class_list =  BC_classes(n)
   then classes = [WeylElt,classical_class,string]:
      for cycles in class_list
      do (conjugacy_class_B(cycles), cycles.class_BC,cycles.cycles_string)
      od
   ,  irreps = [classical_irrep,string,[int]]:
      for rep in BC_irreps(n)
      do ( rep.irrep_BC, rep.irrep_string
         , for cycles in class_list do hyperoctahedral_character(rep,cycles) od
	 )
      od
   in character_table(Spin(2*n+1),classes,irreps)
