<basic.at
<sort.at
<complex_nilpotent_orbits.at
<nilpotent_orbit_partitions.at { for eponymous function }
<combinatorics.at
{type C}
{
three kinds of objects
[int] P: partition for nilpotent orbit of type C_n
         (odd parts have even multiplicity)
[[int] f,[int] g]: symbol as defined by Lusztig
([int] p,[int] q):
  pair of partitions, |p|+|q|=n, corresponding to a Weyl group representation
note that symbol is of type [[int]] (always with two parts)
Wrep is of type ([int],[int])
symbol:
0 \le f_1 < f_2 < ... < f_a
0 \le g_1 < f_2 < ....< g_b
equivalence: [f_1,.., f_a] -> [0,f_1+1,..., f_a+1], same on g
every symbol is equivalent to a unique one with a=b+1 and at most one 0
}

set_type
[ Orbit=[int]   { |Partition| for type C, all odd rows have even multiplicity}
, Symbol=[[int]]  {must have 2 parts: [f,g], other conditions above}
, Wrep  =([int],[int])  {pair of partitions; |p|+|q|=n}
]

{use equivalence relation on symbols to get one with at most one 0}
set normalize ([int] v) = [int]:
   let nv=#v, i=0 in while i<nv and v[i]<=i do i+:=1 od;
   for e in v[i:] do e-i od

{ other direction: replace [a1,,,.ak] with [0,1,...,r-1,a1+r,...,ak+r] }
set expand([int] v, int r) = [int]: #r ## for c in v do c+r od

{normalize symbol: |f|=|g|+1 and at most 1 zero}
set normalize (Symbol S) = Symbol:
  let f=S[0].normalize, g=S[1].normalize then d=#f-(#g+1) in
  case d in [f,g] then [expand(f,-d),g] else [f,expand(g,d)] esac

{ if S=(f,g) is a symbol for C_n then rank(f)=rank(g)=n,
  independently of equivalence classes of f and g rank(f)=sum f_i -n(n-1)/2
}
set symbol_ranks (Symbol S) = (int,int):
   let f=S[0],g=S[1] in (sum(f)-binom(#f,2), sum(g)-binom(#g,2))

{ maps between Orbits, Symbols and Wreps: Orbit -> Symbol <--> Wrep }

{ Orbit -> Symbol (injective map) }
set symbol (Orbit P) = Symbol:
   if is_even(#P) then P#:=0 { extend for odd length } fi;
   let e = { transform partition into strictly increasing sequence }
           for i:#P do P~[i]+i od
   then split = [bool,int]: for x in e do (x.is_even,x\2) od
in [ ## for (b,n) in split do if b then [n] else [] fi od
   , ## for (b,n) in split do if b then [] else [n] fi od
   ]

{ Symbol -> Orbit, partial map }
set orbit (Symbol S) = Orbit:
   let S=normalize(S)
   then f=S[0],g=S[1]
   then F=for c in f do 2*c od, G=for c in g do 2*c+1 od
   then F_G=merge(F,G)
   then H= F_G - # #F_G
in ## for c in H ~do if c.> then [c] else [] fi od

{ Symbol to Wrep (bijection) }
set wrep (Symbol S) = Wrep:
( for f_i@i in S[0] do f_i-i ~od.strip_to_partition
, for g_i@i in S[1] do g_i-i ~od.strip_to_partition
)

{ Orbit -> Wrep
  Use |core_quotient_2|, but swap quotient to match |P.symbol.wrep|
  The reason is that |symbol@Orbit| uses |P~[i]+i| without |-1|, flipping parity
}
set wrep (Orbit P) = Wrep:
   let (d,mu,nu) = core_quotient_2(P) in assert(=d,"Illegal partition"); (nu,mu)

{Wrep to Symbol}
set symbol (Wrep(p,q)) = Symbol:
   let d=#p-(#q+1) in
   case d then p##:= for : -d do 0 od in () else q##:=for : d do 0 od esac;
   [for i:#p do p~[i]+i od,for j:#q do q~[j]+j od]

{Wrep -> Orbit}
set orbit (Wrep(nu,mu)) = Orbit: from_core_quotient_2(0,mu,nu)

{ equality of Wreps }
set = (Wrep(a1,a2),Wrep(b1,b2)) = bool: a1=b1 and a2=b2

{ equality of symbols (not equivalence) }
set symbols_equal(Symbol a,Symbol b) = bool: a[0]=b[0] and a[1]=b[1]

set dimension (Wrep(p,q)) = int: { using hook length formula twice: }
   dim_rep(p)*dim_rep(q)* binom(sum(p),sum(q))

set all_reps_C (int n) = [Wrep]:
   let ps = for r: n+1 do partitions(r) od in
   for pr@r in ps { every list |pr| of |ps| will be paired with another one: }
   do for p in pr { traverse partitions of |r| }
      do for q in ps[n-r] { and of |n-r| } do (p,q) od
      od.## { and everything gets concatenated to a single list }
   od.##

{ a (normalized) symbol is special if f_0<=g_0<= f_1...;
  this is the "raison d'etre" of |Symbol|
}
set is_special (Symbol S) = bool:
   let f=S[0], g=S[1] in all(for gi@i in g do f[i]<=gi and gi<=f[i+1] od)

set is_special (Wrep(nu,mu)) =bool:
(  let d=#(mu:=mu.strip_to_partition)+1-#(nu:=nu.strip_to_partition)
in case d then return false in () else nu ##:= for :d do 0 od esac
;  all(for mu_i@i in mu do nu[i]+1>=mu_i and mu_i>=nu[i+1] od)
)

set is_special (Orbit P) =bool: is_special(wrep(P))

set special_star (Symbol S)  = string: if is_special(S) then "*" else "" fi
set special_star (Orbit P)   = string: if is_special(P) then "*" else "" fi
set special_star (Wrep sigma)= string: if is_special(sigma) then "*" else "" fi

set symbols (RootDatum rd) = [Symbol]:
   for P in nilpotent_orbit_partitions(rd) do symbol(P) od
set wreps (RootDatum rd)=[Wrep]:
   for P in nilpotent_orbit_partitions(rd) do wrep(P) od


{ given a cell C, get list of tau invariants from it,
  then construct the Levi set of C:
  ( [P_0,...,P_r], [Q_0,...,Q_s] )
  P_i: partition of n
  Q_i: labelled partition of n, i.e. partition of n with one part specified:
       Q_i=([b0,...,bs],c) where c=bj for some j (not necessarily unique)
  P_i=[a0,...,ar] -> Levi factor of type GL(a1)x...xGL(ar), with Weyl group
  S_{a0}x...xS_{ar}  (a1+...ar=n)
  Q_i=([b0,...,bs],c) -> Levi factor GL(a1)x...xSp(2bj)x...xGL(bs)
  with Weyl group S_{b0}x...x W(C_{bj}) x ... S_{bs} (b1+...+bs=n)

  roots are labelled 0,...,n-1
  If tau=[c_0,...,c_k] occurs in C, then this contributes to the Levi set of C:
  c_k<n-1: type A Levi factor
  c_k=n-1: type AC Levi factor

  the Levi factor is obtained by grouping strings of adjacent c_j
  each string of length t not including n gives GL(t+1), S_{t+1} factor in P
  a string of length t including n gives Sp(2t), W(C_t)

  for example in C_8 (roots labelled 0-7)
  tau=[0,2,3,4] -> P=[4,2,1,1] (always add 1's at the end to add up to n)
  tau=[1,2,3,5,6,7] -> Q=([4,3,1],3) -> GL(4)xSp(6)xGL(1)
}


{ given v=[a_0,...,a_n] increasing, returns (j,[a_{j},...,a_n])
  where [a_0,...,a_{j-1}] is the longest string (of length j)
  increasing by 1 at each step
}
set cut_off_string ([int] v) = (int,[int]):
   if =#v then (0,v)
   else let v01=v[0]+1 then i=1+first(#v-1,(int i)bool: v[i+1]>v01+i)
   in if =i then (#v,[]) else (i,v[i:]) fi
   fi

{ given v=[a_0,...,a_n] increasing, returns (k,[a_0,...,a_{n-k}]) where
  [a_{n-k+1},..,a_n] is the longest string (of length k)
  increasing by 1 at each step
  where [a_0,...,a_{j-1}] is the longest string (of length j)
 increasing by 1 at each step
}

set cut_off_last_string ([int] v) = (int,[int]):
   if =#v then (0,v)
   else let v01=v~[0]-1 then k=1+first(#v-1, (int k)bool: v~[k+1]<v01-k)
   in if =k then (#v,[]) else (k,v[:k~]) fi
   fi

{ recursive function: given v=[a1,...,am] (increasing) return
 [c1,...,cr]: length of strings in v
 for example [0,1,4,5,7,9,10,11,12] -> [4,2,2,1]
}
set extract_strings ([int] v) = Partition:
   let j=0 in while >#v do set (j,v):=cut_off_string(v); j od.sort_to_partition

{ type A Levi factor(tau invariant): strings, padded with ones to make rank=n }
set A_Levi_factor (int rank, [int] tau) = [int]:
   let tau=sort(tau) in
   assert(tau~[0]< rank,"last entry of tau is great than rank-1");
   assert(tau~[0] != rank-1,"Levi factor is of type AC not A");
   let strings = for a in extract_strings(tau) do a+1 od in
   strings##(for i:rank-sum(strings) do 1 od)

{ AC Levi factor(tau invariant): same as (c,A_Levi_factor) where c gives the
  size of the type C factor
}
set AC_Levi_factor(int rank, [int] tau)=(int,[int]):
assert(tau~[0] = rank-1,"Levi factor is type A not AC");
let (c,)=cut_off_last_string(tau) in
let strings=extract_strings(tau) in
for i:#strings-1 do strings[i]:=strings[i]+1 od;
(c,strings## ones(rank-sum(strings)))

{ maximal (by inclusion) }
set is_max([[int]] taus,[int] tau)=bool:
  none(for x in taus do tau<x od)

{ maximal tau sets only, and without repetition }
set max_only([[int]] taus)=[[int]]:
  let result = [[int]]: [] in
  for tau in taus
  do
    if is_max(taus,tau) and none(for x in result do x=tau od)
    then result#:=tau
    fi
  od; result

set Levi_signature(int rank,[[int]] tau_invariants)=([[int]],[(int,[int])]):
{ if #tau_invariants=0 or #tau_invariants[0]=0
  then ([[rank]],[(int,[int])]:[]) else }
if #tau_invariants=0 then ([[int]]:[],[(int,[int])]:[])
elif #tau_invariants[0]=0 then ([[int]]:[[]],[(int,[int])]:[]) else
let
tau_invariants=max_only(tau_invariants) then
A_Levis=[[int]]:[] then
AC_Levis=[(int,[int])]:[] in
for tau in tau_invariants do
let tau=sort(tau) in
if tau[#tau-1]=rank-1 then
AC_Levis#:=AC_Levi_factor(rank,tau) else
A_Levis#:=A_Levi_factor(rank,tau) fi od;(A_Levis,AC_Levis) fi

set my_max = ([int]->int): max(0) { take 0 for empty list }

set max_first_entry([[int]] v)=int:
  if #v=1 and #v[0]=0 then 0 else my_max(for i:#v do v[i][0] od) fi
set keep_by_first_entry([[int]] v,int k)=[[int]]:
  if #v=1 and  #v[0]=0 then v
  else let rv=[[int]]:[] in for w in v do if w[0]=k then rv#:=w fi od; rv
  fi
set keep_by_first_entry_and_truncate([[int]] v,int k)=[[int]]:
  let w=keep_by_first_entry(v,k) in
  let rv=[[int]]:[] in for u in w do if #u>1 then rv#:=delete(u,0) fi od;rv

{ set max_first_entry([(int,[int])] v)=int:
    max(for i:#v do let (,w)=v[i] in w[0] od)
}

set max_tagged_entry([(int,[int])] v)=int:
  my_max(for i:#v do let (c,)=v[i] in c od)
set keep_by_first_entry([(int,[int])] v,int k)=[(int,[int])]:
  let rv=[(int,[int])]:[] in
  for (c,w) in v do if w[0]=k then rv#:=(c,w) fi od;rv
set keep_by_first_entry_and_truncate([(int,[int])] v,int k)=[(int,[int])]:
  let w=keep_by_first_entry(v,k) in
  let rv=[(int,[int])]:[] in for (c,u) in w do
  if c>0 and #u>1 then rv#:=(c,delete(u,0)) fi od;rv

{Heart of the matter, implements the Noel-Jackson algorithm
given a set of tau-invariants, gives a collection of Levi factors;
find the unique W-rep containing the sign representation of precisely
these Levis
Note: tau_invariants=[[int]]:[] (in the inductive step signals done)
is different from [[int]]:[[]] (gives the trivial rep, principal orbit
}
set wrep(int rank,[[int]] tau_invariants)=Wrep:
  let rec_fun f
    (int rank,[[int]] A_Levis,[(int,[int])] AC_Levis, [int] p,[int] q) =
    ([int],[int]):
if #A_Levis=0 and #AC_Levis=0 then
let ()=prints("Done with p=",p, "q=",q) in
assert(sum(p)+sum(q)=rank,"Error: |p|+|q| != rank");
(transpose(q),transpose(p))
elif #A_Levis=1 and #A_Levis[0]=0 and #AC_Levis=0 then ([rank],[]) else let
()=prints();prints("p=",p," q=",q) then
()=prints("A_Levis: ", A_Levis, " AC_Levis: ", AC_Levis) then
{algorithm:
 x+y=a
   x=b => y=a-b
 add x to p, y to q
 keep only the Levis with first term a}
a=max_first_entry(A_Levis) then
b=max_tagged_entry(AC_Levis) then
{()=prints("a= ", a, " b= ", b) then}
x=b,y=a-b in  {add x to p, y to q, keep only Levis with first term a}
{let ()=prints("x= ", x, " y=", y) in}
if x>0 then p:=p#x fi;
if y>0 then q:=q#y fi;
f(rank,keep_by_first_entry_and_truncate(A_Levis,a)
     ,keep_by_first_entry_and_truncate(AC_Levis,a),p,q)  fi in
let (A_Levis,AC_Levis)=Levi_signature(rank,tau_invariants) in
  f(rank,A_Levis,AC_Levis,[],[])

set wrep(Block B,[int] cell)=Wrep:
wrep(rank(real_form(B)), tau_invariants_of_cell_raw(B,cell))

set wreps(Block B,[[int]] cells)=[Wrep]:for cell in cells do wrep(B,cell) od

set print_wrep_cpt(Block B, [int] cell)=
let rep=wrep(B,cell) in
prints(cell, "              ", Aq_reps(B,cell), "             ", rep
      ,special_star(rep), "        ", orbit(rep))

set print_wrep(Block B, [int] cell)=
let rep=wrep(B,cell) then
taus=tau_invariants_of_cell_raw(B,cell) then
max_taus=max_only(taus) in
prints("cell: ",cell, "  (",#cell,")");
let Aq=Aq_reps(B,cell) in
 if #Aq=0 then prints("Not an Aq cell") else
 prints("Aq reps: ", Aq) fi;
prints("tau invs.: ",taus);
prints("max taus: ",max_taus);
prints("special rep: ", rep, special_star(rep));
prints("orbit: ", orbit(rep))

set print_wreps_cpt(Block B,[[int]] cells)=void:
prints("cell             Aq's             special_rep        orbit");
for cell in cells do print_wrep_cpt(B,cell) od

set print_wreps(Block B,[[int]] cells)=void:
for i:#cells do  prints("Cell ",i);print_wrep(B,cells[i]);prints() od
