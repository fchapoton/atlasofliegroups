<structure_constants.at

set null(StructureConstantTable t)=LieAlgebraElement:(t,(null(#t.root_datum.roots),null(t.root_datum.ss_rank)))
set solve_ad(LieAlgebraElement X,LieAlgebraElement Z)=solve(ad(X),coordinates(Z))

set *(int c,[CyclotomicFieldElement] v)=[CyclotomicFieldElement]:
for i:#v do c*v[i] od


set ad(LieAlgebraElement X)=ratmat:
ratvecs_as_ratmat(for i:X.root_datum.dimension do coordinates(bracket(X,basis(X.t,i))) od)

{complete Jacobson Morozov triple: working over CF(n):
given H, find X,Y so that [H,X]=2X, [H,Y]=-2Y, [X,Y]=H}
set JM_triple(StructureConstantTable t,vec H,int n)=(bool,(LieAlgebraElement,LieAlgebraElement,LieAlgebraElement)):
let F=CF(n) then
zeta=F.primitive_root then
S=two_eigenspace(t,H) then
N=#S {length of vectors} then
coeffs=box(n,#S) in
 for A in coeffs do
 let X=for i:#S do F.zero od then
 ()= for i:#S do X+:=A[i]*embed_Q(S[i].root_part,F)   od then
 M=
 sol=full_solve(X,H) in
 if any(sol) then {prints("found:", H, new_line, X.root_part);}
 return(true,(lie_algebra_element_semisimple(t,H),X,lie_algebra_element(t,requisition(sol)))) fi od;(false,(null(t),null(t),null(t)))


