<character_tables.at
<nilpotent_orbits.at

{the first part of this file was previously character_table_E6.at}
set rd=simply_connected(E6)
set W_order=order_W(rd)
set class_size(WeylElt w)=W_order\w.centralizer_order

set orbits=rd.orbits
set wct=W_class_table(rd)
set wct_classes=wct.class_representatives()
set classes_E6=wct_classes
set class_centralizer_sizes_E6=for w in classes_E6 do w.centralizer_order od
set class_sizes_E6=for w@i in classes_E6 do W_order\class_centralizer_sizes_E6[i] od
set class_orders_E6=for w in classes_E6 do w.order od
set E6_name(CharacterTable ct)=(vec->string):(vec v):string:
let dim=v[0] then
index=find(ct.characters,v) then
d=ct.degree(index) in
"phi(" + dim.to_string+","+d.to_string+")"

set character_table_E6_0() = CharacterTable:
let ncc=25
in
  ( Lie_type(E6)    {lie_type}  
  , W_order    {order (of W)}
  , ncc      {n_classes}
  , (int j) classical_class: ().null_class
  , (int j) string: "" {class_label} {fill in later}
  , (int j) WeylElt: classes_E6[j] {class_rep}
  , (int j) int: class_orders_E6[j]
  , (int j, int p) int: first(ncc,(int i): is_conjugate(classes_E6[i],classes_E6[j]^p))
  , class_centralizer_sizes_E6
  , class_sizes_E6
  , (int j): null_irrep()
  , (int i) string: "" { irreducible representation label }  {later}
  , [[int]]:[]  {sym_powers_reflection}
  ,[int]:[]     {degrees}
{  ,table_E6_atlas}
  ,mat:[[]]  {leave empty at first}
  )

{from magma}
set e6_table=^[
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,-1,1,1,-1,1,1,1,1,-1,-1,1,1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,1],
[6,4,-2,2,0,-3,3,0,2,-2,2,0,1,1,1,1,-2,-2,-1,0,0,0,-1,1,-1],
[6,-4,-2,2,0,-3,3,0,2,2,-2,0,1,1,1,-1,-2,2,-1,0,0,0,1,-1,-1],
[10,0,-6,2,0,1,-2,4,2,0,0,-2,0,-3,0,0,0,0,2,0,0,1,0,0,-1],
[15,-5,7,3,-1,-3,0,3,-1,-3,1,1,0,1,-2,-2,1,1,0,-1,1,0,0,0,-1],
[15,-5,-1,-1,3,6,3,0,3,-1,-1,-1,0,2,-1,1,2,-2,-1,0,1,0,0,-1,0],
[15,5,7,3,1,-3,0,3,-1,3,-1,1,0,1,-2,2,1,-1,0,1,-1,0,0,0,-1],
[15,5,-1,-1,-3,6,3,0,3,1,1,-1,0,2,-1,-1,2,2,-1,0,-1,0,0,1,0],
[20,10,4,4,2,2,5,-1,0,2,2,0,0,-2,1,1,1,1,1,-1,0,-1,0,-1,0],
[20,-10,4,4,-2,2,5,-1,0,-2,-2,0,0,-2,1,-1,1,-1,1,1,0,-1,0,1,0],
[20,0,4,-4,0,-7,2,2,4,0,0,0,0,1,-2,0,-2,0,2,0,0,-1,0,0,1],
[24,4,8,0,4,6,0,3,0,0,0,0,-1,2,2,-2,-1,1,0,1,0,0,-1,0,0],
[24,-4,8,0,-4,6,0,3,0,0,0,0,-1,2,2,2,-1,-1,0,-1,0,0,1,0,0],
[30,-10,-10,2,2,3,3,3,-2,4,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,1,1],
[30,10,-10,2,-2,3,3,3,-2,-4,0,0,0,-1,-1,1,-1,1,-1,1,0,0,0,-1,1],
[60,10,-4,4,2,6,-3,-3,0,-2,-2,0,0,2,-1,1,-1,1,1,-1,0,0,0,1,0],
[60,-10,-4,4,-2,6,-3,-3,0,2,2,0,0,2,-1,-1,-1,-1,1,1,0,0,0,-1,0],
[60,0,12,4,0,-3,-6,0,4,0,0,0,0,-3,0,0,0,0,-2,0,0,0,0,0,1],
[64,16,0,0,0,-8,4,-2,0,0,0,0,-1,0,0,-2,0,-2,0,0,0,1,1,0,0],
[64,-16,0,0,0,-8,4,-2,0,0,0,0,-1,0,0,2,0,2,0,0,0,1,-1,0,0],
[80,0,-16,0,0,-10,-4,2,0,0,0,0,0,2,2,0,2,0,0,0,0,-1,0,0,0],
[81,9,9,-3,-3,0,0,0,-3,3,-1,-1,1,0,0,0,0,0,0,0,1,0,-1,0,0],
[81,-9,9,-3,3,0,0,0,-3,-3,1,-1,1,0,0,0,0,0,0,0,-1,0,1,0,0],
[90,0,-6,-6,0,9,0,0,2,0,0,2,0,-3,0,0,0,0,0,0,0,0,0,0,-1]]

{from magma}
set e6_orders_sizes=^[
[1,2,2,2,2,3,3,3,4,4,4,4,5,6,6,6,6,6,6,6,8,9,10,12,12],
[1,36,45,270,540,80,240,480,540,540,1620,3240,5184,720,1440,1440,1440,1440,2160,4320,6480,5760,5184,4320,4320]
]

{from magma}
set e6_powers_unshifted=^
[[1,1,1,1,1,6,7,8,3,4,4,4,13,6,7,7,8,8,7,8,9,22,13,19,14],
[1,2,3,4,5,1,1,1,9,10,11,12,13,3,3,2,3,2,4,5,21,6,23,10,9],
[1,2,3,4,5,6,7,8,9,10,11,12,1,14,15,16,17,18,19,20,21,22,2,24,25]]

set e6_powers=for row in e6_powers_unshifted do for j:#row do row[j]-1 od od

set e6_sgn_index=1
set e6_reflection_index=2
set e6_sgn_reflection=mat:
^[row(e6_table,e6_sgn_index),row(e6_table,e6_reflection_index)]

set e6_profile=^(^e6_orders_sizes)##(^e6_sgn_reflection)
set e6_profile_long=^(^e6_orders_sizes)##(^e6_sgn_reflection)##(^e6_powers)

set character_table_E6()=
let ct=initialize_character_table(simply_connected(E6)) then
ct1=set_table(ct,e6_profile,e6_table) then
ct2=ct1.update_degrees then
ct3=ct2.update_sym_powers_reflection in
ct3


