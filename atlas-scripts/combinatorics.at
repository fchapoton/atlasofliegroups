{ The purpose of this module is to collect basic combinatorial functions,
  like factorials, binomial coefficients, generators of partitions and so on
}

<basic.at
<sort.at
<lazy_lists.at { for |inf_list| type and related stuff }
<groups.at { for root data computed by |GL|, |Sp|, |SO| }

set fac (int n) = int:
   if n<2 then assert(n.>=,"Factorial of negative integer"); 1
   else let p=n in for i:n-2 from 2 do p*:=i od; p
   fi

set binom (int n, int k) = int:
   if n.>= and k+k>n then k:=n-k fi; { use symmetry to limit |k| }
   case k then 0 in 1, n
   else let p=n*(n-1) in for i:k-2 from 2 do p:=p\i*(n-i) od; p\k
   esac

set binom (rat n, int k) = rat:
   if n.denom=1 and n.>= and k+k>n then k:=n.numer-k fi; { try for efficiency }
   case k then 0 in 1, n
   else let p=n*(n-1) in for i:k-2 from 2 do p:=p/i*(n-i) od; p/k
   esac

set multi_choose (int n,int k) = int: binom(n+k-1,k)

set falling_power (int n, int k) = int: assert(>=0,"Negative exponent");
   let p=1 in for i:k from n-k+1 do p*:=i od; p

set rising_power (int n, int k) = int: assert(>=0,"Negative exponent");
   let p=1 in for i:k from n do p*:=i od; p


{ extract components at even or odd positions }
set even_places ([int] v) = for i:ceil(#v/2) do v[2*i] od
set odd_places  ([int] v) = for i:floor(#v/2) do v[2*i+1] od


{				Partitions				}

set_type Partition = [int]   { list of decreasing parts, no trailing zeros }

set strip_to_partition ([int] list) = Partition:
   let i=0, nl=#list in while i<nl and =list~[i] do i+:=1 od; list[:i~]
{ alternatively: |for x in list do if =x then break fi od| }

set is_decreasing ([int] v) = bool: all(for i:#v-1 do v[i]>=v[i+1] od)

{ comparing partitions of same |n| lexicographically; implicitly 0-extend }
set leq_equal_sum_partitions(Partition lambda, Partition mu) = bool:
   let m=#mu in
   for l@i in lambda
   do if i>=m then return l.<= elif l!=mu[i] then return l<mu[i] fi
   od; true { any remaining entries of |mu| are necessarily 0 }

{ comparing partitions by sum then lexicographically; implicitly 0-extend }
set leq_Partitions ((Partition,Partition) (lambda,mu):pair) = bool:
  let sl=lambda.sum, sm=mu.sum in
  if sl=sm else sl<sm then leq_equal_sum_partitions(pair) fi

{ compare lists of signed cycle lengths, ordered minus first then decreasing }
set leq_signed_cycles ([int,bool] x, [int,bool]y) = bool:
(  let m=min(#x,#y) in
   for i:m
   do let (xi,si)=x[i], (yi,ti)=y[i] in
      if si!=ti then return ti { have (a,+)<(b,-): in this case LHS has + only }
      elif xi!=yi then return xi<yi
      fi
   od
;  #x <= #y { if one is prefix of the other, compare as their lengths do }
)

set sort_cycle_types([[int,bool]] a) = [[int,bool]]:
   for k in sort(#a,(int i,int j)bool: leq_signed_cycles(a[i],a[j])) do a[k] od

set frequencies (Partition lambda) = vec:
  let v=null(0) in
  for l in lambda
  do if l>=#v then v ##:= null(l-#v)#1 else v[l]+:=1 fi
  od; v

set repeat_parts (vec frequencies) = Partition:
  ## for f@i in frequencies ~ do if =i then [] else for :f do i od fi od

set sort_to_partition ([int] parts) = Partition:
  parts.frequencies.repeat_parts

{ transpose of a partition (parts assumed already in decreasing order) }
set transpose (Partition lambda) = Partition:
  if #lambda=0 then []
  else let l=#lambda in
    for i:lambda[0] { value |lambda[0]| is sentinel ensuring |l>0| below }
    do while lambda[l-1]<=i do l-:=1 od; l
    od
  fi

set partitions = (int n) [Partition]:
  if n.< then []
  else
    let table = [[ [Partition] ]]: { partitions by sum, then by largest part }
      for m:n+1
      do if =m then [ [[]] ] { empty partition of 0 } else [] { nothing yet } fi
      od
    in
    for m:n from 1
    do table[m] := ([Partition]: []) { no partitions with largest part 0 } #
      for k: if m=n then n else min(m,n-m) { truncate to need } fi from 1
	 { form list of partitions of |m| with largest part |k| }
      do let rem = m-k { amount remaining after using one part |k| of |m| } in
        { traverse all partitions of |rem| with parts at most |min(k,rem)|: }
	for lambda in ##table[rem][:min(k,rem)+1] do k#lambda od
      od
    od
  ; ##table~[0] { concatenate entries of final table row }
  fi

set part_restricted_partitions ((int->bool)pred) =
  (int n) [Partition]:
  if n.< then []
  else
    let table = [[ [Partition] ]]: { partitions by sum, then by largest part }
      for m:n+1
      do if =m then [ [[]] ] { empty partition of 0 } else [] { nothing yet } fi
      od
    in
    for m:n from 1
    do table[m] := ([Partition]: []) { no partitions with largest part 0 } #
      for k: if m=n then n else min(m,n-m) { truncate to need } fi from 1
	 { form list of partitions of |m| with largest part |k| }
      do
        if pred(k) then
          let rem = m-k { amount remaining after using one part |k| of |m| } in
    	  { traverse all partitions of |rem| with parts at most |min(k,rem)|: }
	  for lambda in ##table[rem][:min(k,rem)+1] do k#lambda od
	else [] { leave empty list at position |k| which fails |pred| }
	fi
      od
    od
  ; ##table~[0] { concatenate entries of final table row }
  fi

set odd_part_partitions = part_restricted_partitions(is_odd@int)

{ partitions with distinct parts: all multiplicties are 0 or 1 }
set strict_partitions = (int n) [Partition]:
  if n.< then []
  else
    let table = [[ [Partition] ]]: { partitions by sum, then by largest part }
      for m:n+1
      do if =m then [ [[]] ] { empty partition of 0 } else [] { nothing yet } fi
      od
    in
    for m:n from 1
    do table[m] := ([Partition]: []) { no partitions with largest part 0 } #
      for k: if m=n then n else min(m,n-m-1) { truncate to need } fi from 1
	 { form list of partitions of |m| with largest part |k| }
      do { traverse all partitions |m-k| with parts at most |min(k,m-k)|: }
        let rem = m-k in
        for lambda in ##table[rem][:min(k-1,rem)+1] do k#lambda od
      od
    od
  ; ##table~[0] { concatenate entries of final table row }
  fi

{ partitions with even multiplicity of parts of one parity (odd or even) }
set parity_restricted_partitions (bool restrict_odd_parts) = (int->[Partition]):
  let is_multiplicity_restricted = (int->bool):
    if restrict_odd_parts then is_odd@int else is_even@int fi   in
  (int n) [Partition]:
  if n.< or restrict_odd_parts and n.is_odd then [] { impossible, so nothing }
  else
    let table = [[ [Partition] ]]: { partitions by sum, then by largest part }
      for m:n+1
      do if =m then [ [[]] ] { empty partition of 0 } else [] { nothing yet } fi
      od
    in
    for m:n from 1
    do table[m] := ([Partition]: []) { no partitions with largest part 0 } #
      for k: if m=n then n else min(m,n-m) { truncate to need } fi from 1
	 { form list of partitions of |m| with largest part |k| }
      do { traverse all partitions |m-k| with parts at most |min(k,m-k)|: }
        if k.is_multiplicity_restricted
        then { restrict use of k to using it twice, |lambda| may also have |k| }
	  let rem=m-k-k in
          if rem.< then []  { if a negative remainder, then no solutions here }
          else for lambda in ##table[rem][:min(k,rem)+1] do [k,k]##lambda od
          fi
	else { we use |k| once, |lambda| could have part(s) equal to |k| too }
	  let rem = m-k in
          for lambda in ##table[rem][:min(k,rem)+1] do k#lambda od
        fi
      od
    od
  ; ##table~[0] { concatenate entries of final table row }
  fi

set partition_pairs (int n) = [Partition,Partition]:
  let list = for i:n+1 do partitions(i) od in
##for parts_i@i in list
  do ##for lambda in parts_i do for mu in list[n-i] do (lambda,mu) od od
  od

{ look up partition in sorted list of partitions, all assumed of same sum }
set index_partition([Partition] sorted_list) = (Partition->int):
(  let l=#sorted_list in
   (Partition lambda) int:
      binary_search_first
      ((int i)bool:leq_equal_sum_partitions(lambda,sorted_list[i])
      ,0,l
      )
)

{ look up pair in sorted list of partition pairs, all assumed of same sum }
set index_partition_pair([Partition,Partition] sorted_list) =
      (Partition,Partition->int):
(  let l=#sorted_list in
   ((Partition lambda,Partition mu)) int: let n0=lambda.sum in
      binary_search_first
      ( (int i)bool: { whether list[i] equals or comes after (lambda,mu) }
         let (nu,pi)=sorted_list[i] in
         case n0-nu.sum { three-way branch on left partitions size comparison }
         then true else false { whether nu.sum exceeds lambda.sum }
         in if lambda=nu else leq_equal_sum_partitions(lambda,nu)
            then leq_equal_sum_partitions(mu,pi)
            fi
         esac
      ,0,l
      )
)

{ look up in list of signed cycle types, and translate index found by |map|;
  contrary to previous index functions, the |list| is not assumed ordered
}
set index_signed_cycles([[int,bool]] list,[int] map) = ([int,bool]->int):
(  let l=#list in
{ first ensure that |list| is sorted, and that |map| is permuted accordingly }
   ( let perm = sort(l,(int i,int j):leq_signed_cycles(list[i],list[j])) in
     list := for i in perm do list[i] od; map := for i in perm do map[i] od
   )
;  ([int,bool] cycle_type) int:
      map
      [ binary_search_first
        ( (int i)bool: { whether list[i] equals or comes after cycle_type }
             leq_signed_cycles(cycle_type,list[i])
        ,0,l
        )
      ]
)


{ converting partition pairs to signed cycle types, first means flipped cycles }
set cycles (Partition lambda,Partition mu) = [int,bool]:
  for part in lambda do (part,true) od ## for part in mu do (part,false) od

set rank (Partition lambda,Partition mu) = int: lambda.sum+mu.sum
set rank ([int,bool] cycles) = int: for (c,) in cycles do c od.sum

{ compute cycle type of power of a permutation, given its cycle type }
set cycle_power ([int] cycles, int k) = [int]:
   for l in cycles
   do let d=gcd(l,k) then q=l\d in for :d do q od { splitting of one cycle }
   od.##.reverse_sort

set hook_lengths (Partition lambda) = [int]:
   let lambda_tr=lambda.transpose in
   for part@i in lambda
   do for j:part do (part-j) + (lambda_tr[j]-i) - 1 od { arm + leg - 1 }
   od.##.reverse_sort

set Sn_representation_dimension (Partition lambda) = int:
   let hl=lambda.hook_lengths in hl.#.fac\hl.product

set hook_lengths ([bool] edges) = [int]:
   let last=#edges-1 in
 ##for edge@i in edges
   do if edge then []
      else ##for j:last-i from i+1 do if edges[j] then [j-i] else [] fi od
      fi
   od

{ edge sequence from first horizontal (false) to last horizontal, and shift }
set edge_sequence (Partition lambda) = ([bool],int):
   if =#lambda or =lambda[0] then ([],0)
   else
      let d = lambda.transpose[0] { offset, index of edge above main diagonal }
      , edge_val=is_member(for part@i in lambda do part-i-1 od)
      in (for i:lambda[0]+d from -d do edge_val(i) od, d)
   fi

{ character of irreducible Sn representation lambda at give cycle type }
set Murnaghan_Nakayama (Partition lambda, [int] cycle_type) = int:
   assert(sum(lambda)=sum(cycle_type),"Size mismatch");
   let (edge,) = edge_sequence(lambda), alpha=cycle_type.sort in
   (#alpha-1).
   (rec_fun MN (int j) int:
    if j.< then 1 { the unique character value for the trivial group S0 }
    else
       let k=alpha[j] { size of cycle in cycle type, and hence of rim hooks } in
       if k=1 { this case will be handled separately for efficiency }
       else { traverse candidate positions for removal of a |k| rim hook: }
	  for i in list(#edge-k,(int i)bool: not edge[i] and edge[i+k])
	  do edge[i+k]:=false; edge[i]:=true { remove our chosen |k| rim hook }
	  ; minus_1^count(edge[i+1:i+k])*MN(j-1) { recursive value, hook sign }
	  next edge[i]:=false; edge[i+k]:=true { restore: add rim hook back }
	  od
	 .sum { add up value from all candidate positions }
       then { |k=1| case, used the hook length formula for remaining partition }
          let hl=edge.hook_lengths in hl.#.fac\hl.product
       fi
    fi
   )

{ counterpart of the Murnaghan-Nakayama rule for hyperocthedral groups }
set hyperoctahedral_character (
      ((Partition lambda, Partition mu){irreducible: (trivial,sign) for {1,-1}}
      ,[int,bool] signed_cycle_type{describes a conjugacy class}
      )) = int:
   assert(sum(lambda)+sum(mu)
         =sum(for (c,) in signed_cycle_type do c od),"Size mismatch");
   let (edge0,)=edge_sequence(lambda), (edge1,)=edge_sequence(mu)
   , alpha = signed_cycle_type.(sort_by((int c,bool.)int: c))
   in (#alpha-1).
   (rec_fun f (int j) int:
    if j.< then 1 { the unique character value for the trivial group S0 }
    else let (k,sign)=alpha[j] { size of cycle type, and hence of rim hook } in
       if k=1 { this case will be handled separately for efficiency }
       else { traverse candidate positions for removal of a |k| rim hook: }
       (  for i in list(#edge0-k,(int i)bool: not edge0[i] and edge0[i+k])
	  do edge0[i+k]:=false; edge0[i]:=true { remove chosen |k| rim hook }
	  ; minus_1^count(edge0[i+1:i+k])*f(j-1) { recursive value, hook sign }
	  next edge0[i]:=false; edge0[i+k]:=true { restore: add rim hook back }
	  od
	 .sum { add up value from all candidate positions }
       ,  for i in list(#edge1-k,(int i)bool: not edge1[i] and edge1[i+k])
	  do edge1[i+k]:=false; edge1[i]:=true { remove chosen |k| rim hook }
	  ; minus_1^count(edge1[i+1:i+k])*f(j-1) { recursive value, hook sign }
	  next edge1[i]:=false; edge1[i+k]:=true { restore: add rim hook back }
	  od
	 .sum { add up value from all candidate positions }
       )
       . if sign else +@(int,int) then -@(int,int) fi { add or subtract sums }
       then { |k=1| case, used the hook length formula for remaining partition
              We need to keep track of the number |l| of negative sign 1-cycles
              the get distrubuted to |edge1|, the sign-character partition }
          let hl0=edge0.hook_lengths, hl1=edge1.hook_lengths
          then { get fixed row sums and column sums for $\N$-matrix [.,.|.,l] }
            (a,b) = (#hl0,#hl1) { partition sizes to be filled }
          , (c,d) = for (,sign) in alpha[:j+1] do s^#sign{use |Split|} od.sum.%
          then lwb = max(0,d-a{=c-b}), upb=min(d,b) { bounds for l }
          in assert(a+b=c+d);
          for l:upb-lwb+1 from lwb do minus_1^l*binom(c,b-l)*binom(d,l)od.sum
          * (a.fac\hl0.product)*(b.fac\hl1.product) { factor independent of l }
       fi
    fi
   )


{
  Core and quotient operations can be defined in terms of associating to any
  partition $\lambda$ the subset $\{ lambda[i]-i-1 | i\in\N \}$ of $\Z$. This
  set represents the set of vertical edges terminating the rows of the Young
  diagram, recorded by their diagonal positions (the main diagonal separating
  positions in $\N$ from its complement, i.e., its splits between -1 and 0).

  This set is bounded above while its complement is bounded below; more
  specifically the set meets $\N$, and its complement the complement of $\N$, in
  equal size finite sets. An ordered pair of partitions can be "spliced
  together" as follows: take there associated sets, transform the former by
  $i\mapsto 2i$ and the latter by $i\mapsto 2i+1$, merge the results and find
  the partition corresponding to the set. If the Young diagrams original
  partitions together have $n$, the spliced partition can be covered by $n$
  dominos. More generally we could add a fixed integer $d$ in the first
  transformation and subtract it in the second; then $d$ will be the unbalance
  of black and white squares in the diagram of the resulting partition, and
  after removing $n$ dominos from it we are left with a "2-core" still having
  the same unbalance. It is a staircase diagram with |core_length(d)| parts.
  The pair of original partitions is the "2-quotient" of the spliced partition.
}

set core_length (int n) = int: if n.<= then 2*-n else 2*n-1 fi
set core_number (int k) = int: assert(k.>=); case k in -k\2, -k\-2 esac

{ splicing two partitions |mu|, |nu|, with 2-core with (unbalance) number |d| }
set from_core_quotient_2 (int d,Partition mu,Partition nu) = Partition:

{ Implementation is delicate, as we must represent infinite sets finitely.
   Initially take just one number for each (nonzero) part of each partition, and
   record the first numbers |k|, |l| that are omitted in this representation.
   Also reverse the order to increasing, since this is what |merge@([int,[int])|
   defined in sort.at assumes. Before merging, we need to "even out" the
   (negative) heads of the lists by adding omitted terms to one of them, those
   whose absent would produce gaps in the merged result. The first such term to
   be added (if any) is 3 more than the first omitted term in the other list.
}
(  let evens = for m@i in mu do 2*(m-i-1+d) ~od { space out and reverse }
   ,   odds = for n@i in nu do 2*(n-i-1-d)+1 ~od { likewise }
   ,   k = 2*(-#mu-1+d), l = 2*(-#nu-1-d)+1 { last omitted values before lists }
in if k>l
   then evens := for i:(k-l)\2 from l\2+2 do i+i od ## evens
   else odds := for i:(l-k)\2 from k\2+1 do i+i+1 od ## odds
   fi
;  for d@i in merge(evens,odds)~[:] do d+i+1 od.strip_to_partition
)

set core_quotient_2 (Partition lambda) =(int,Partition,Partition):
   let l=#lambda
   then (prev_even,prev_odd) = case l in (-l-2,-l-1), (-l-1,-l-2) esac
   , mu=[int]:[0], nu=[int]:[0] { partitions in reverse (increasing) order }
in for a@i in lambda
  ~do let d=a-i-1 in
      case d
      in mu #:= mu~[0]-1+(d-prev_even)\2; prev_even:=d
      ,  nu #:= nu~[0]-1+(d-prev_odd )\2; prev_odd :=d
      esac
   od; ( -(#nu-#mu)\2, mu~[:].strip_to_partition, nu~[:].strip_to_partition )

{				Permutations				}

{ Matrix whose left-mulitplication to a column vector permutes it by |pi|.
  It has nonzero entries at each (pi(j),j), it could have been defined (using
  |matrix| from basic.at) as |matrix((#pi,#pi),(int i,int j): #(i=pi[j]) )|.
}
set permutation_matrix ([int] pi) = mat:
   let n=#pi then I=n.id_mat in n# for v in pi do I[v] od

set permutation (mat P) { assumed a permutation matrix} = [int]:
  (vec: #P.n_rows)*P { right-act on row [0,1,...,n-1] for one-line form }

set compose_permutations ([int] sigma, [int] pi) = [int]:
  for i in pi do sigma[i] od

set inverse ([int] pi) = [int]: { hope that name causes no conflict }
  let n=#pi then result=for :n do n od { sentinel values} in
  for i@j in pi
  do assert(i.>= and i<n and result[i]=n { in range, and no seen before }
           ,to_string("not a permutation (",i,")"));
     result[i]:=j
  od; result

{ longer name for non-checking (so faster) version of the above }
set permutation_inverse ([int] pi) = [int]:
  let result=null(#pi) in for i@j in pi do result[i]:=j od; result

set permute ([int] pi,vec v) = vec: { replaces |v[i]| by |v[pi.inverse[i]]| }
  assert(#pi=#v { and |pi| is a permutation },"length mismatch");
  let result=null(#v) in for i@j in pi do result[i]:=v[j] od; result

set permutation_cycles ([int] pi) = [[int]]:
  let n=#pi then todo = for :n do true od in
  while let i=first(todo) in i.>=
  do
    while todo[i] do todo[i]:=false; i next i:=pi[i] od
  od

{ Find classical (permutation or signed permutation) description of Weyl group
  elements in classical types. The associated root datum must have one simple
  factor of type A-D, with standard (Bourbaki) numbering of the Dynkin diagram.
  Such a root datum can be obtained from classical factors in the Lie type from
  |Cartan_matrix_type|, by taking Levi subdatum of the corresponding simple
  roots/coroots, following the mapping that |Cartan_matrix_type| also supplies.

  The output is a (signed) permutation in one-line format. For type $A_n$ this
  is just a permutation of $n+1$ (hence 0-based), for types $B_n$, $C_n$, $D_n$
  this is a permutation of the $2n$ elements $-n, ,..., -2 -1, 1, 2, ..., n$,
  commuting with $x \mapsto -x$, and the one-line format consists of a list of
  the images of $1, 2, ..., n$ (1-based); it determines the signed permutation.
}
set classic_permutation (WeylElt w) = [int]:
  let rd=w.root_datum then (lt,map)=Cartan_matrix_type(rd.Cartan_matrix)
  then factors=simple_factors(lt) then nf=#factors
  in assert(nf=1,"Root datum diagram is not connected ("+ nf +" components");
  let (type,rank)=factors[0] in
  assert(map=#rank,"Dynkin diagram is not in standard order");
  case char_index(type,"ABCD")
  else error("Root datum of exceptional type "+type)
  in let n=rank+1 in (vec:#n)*W_elt(GL(n),w.word) { right act on [0,1,...,n-1] }
  , (vec:for i:rank from 1 do i od)*W_elt(Sp(rank+rank),w.word)
  , (vec:for i:rank from 1 do i od)*W_elt(Sp(rank+rank),w.word)
  , (vec:for i:rank from 1 do i od)*W_elt(SO(rank+rank),w.word)
  esac

set cycle_type ([int] pi) = Partition: { cycle sizes in decreasing order }
  for cycle in permutation_cycles(pi) do #cycle od.reverse_sort

set signed_cycle_type ([int] sigma) = [int,bool]: { pairs of cycle and sign }
  let cycles = for a in sigma do abs(a)-1 od.permutation_cycles
  ,   flip   = for a in sigma do a.< od { whether negative, per position }
  then size = for cycle in cycles do #cycle od
  ,    sign = for cycle in cycles do for i in cycle do #flip[i] od.sum.is_odd od
  in for i in inv_standardisation(size) do (size[i],sign[i]) ~od

set cycle_type_order = lcm@[int]
set cycle_type_order ([int,bool] cycles) = int:
  for (cycle,sign) in cycles do if sign else cycle then cycle+cycle fi od.lcm

set cycle_centralizer_order ([int] cycles) = int:
  product(cycles)*product(for m in cycles.frequencies do m.fac od)
set cycle_centralizer_order ([int,bool] cycles) = int:
  let plus_cycles = ## for (c,s) in cycles do if s then [] else [c] fi od
  ,  minus_cycles = ## for (c,s) in cycles do if s then [c] else [] fi od
  in product(for (cycle,) in cycles do cycle+cycle od)*
     product(for m in plus_cycles.frequencies do m.fac od)*
     product(for m in minus_cycles.frequencies do m.fac od)

{ compute cycle type of power of a signed permutation, given its cycle type }
set cycle_power ([int,bool] cycles, int k) = [int,bool]:
   let m = for (c,) in cycles do c od.(max(0))
   then n_cycles = { multiplicities by cycle length and sign }
     mat: null(m,2) { row index offset by 1, minus_1^(column index) is sign }
in for (l,sign) in cycles
   do let d=gcd(l,k) in n_cycles[l\d-1,#sign*(k\d)%2] +:= d
   od;
 ##for b:2 ~ { true (negative) before false (positive) }
   do let kind = b.is_odd in
    ##for l:m from 1 ~do for :n_cycles[l-1,b] do (l,kind) od od
   od


{ adaptation to the above to deal with Weyl groups of type Dn }

set_type
[ Dn_irrep = { from folding pairs of partitions under swapping }
   ( (Partition,Partition) unsplit_irr { unequal partitions, larger first }
   | (Partition,bool) split_irr { for pair of equal partitions, with sign }
   )
, Dn_class = { cycle types restricted to Dn subgroup }
   ( [int,bool] unsplit_class { the XOR of all |bool| values is |false| }
   | (Partition,bool) split_class { "all false" even cycles, and a single sign }
   )
]

{ recover the value of |n| }
set rank (Dn_irrep chi) = int:
   case chi | pair.unsplit_irr: pair.rank | (mu,).split_irr: 2*mu.sum esac

set rank (Dn_class C) = int:
   case C
   | cycles.unsplit_class: cycles.rank
   | (alpha,).split_class: alpha.sum
   esac

set cycle_type_order (Dn_class C) = int:
   case C
   | cycles.unsplit_class: cycles.cycle_type_order
   | (alpha,).split_class: alpha.cycle_type_order { first cycle type suffices }
   esac

{ compute cycle type of power of a signed permutation, given its cycle type }
set cycle_power (Dn_class C, int k) = Dn_class:
   case C
   | cycles.unsplit_class: cycle_power(cycles,k).unsplit_class
   | (alpha,sign).split_class: let beta=cycle_power(alpha,k) in
     if for c in beta do c%2=0 od.all { whether class remains split }
     then (beta,sign).split_class { keep sign when class remains split }
     else for c in beta do (c,false) od.unsplit_class
     fi
   esac

set centralizer_order (Dn_class C) = int:
   case C
   | cycles.unsplit_class: cycles.cycle_centralizer_order\2
   | (alpha,).split_class: alpha.cycle_centralizer_order*2^#alpha
   esac

set Dn_irreducibles (int n) = [Dn_irrep]:
 ##for (lambda,mu) in partition_pairs(n)
   do if leq_Partitions(lambda,mu) then [] else [(lambda,mu).unsplit_irr] fi
   od ##
  (let (s,r)=n\%2 in
   if =r else []
   then
    ##for lambda in partitions(s)
      do [(lambda,false).split_irr,(lambda,true).split_irr]
      od
   fi
  )

set Dn_classes (int n) = [Dn_class]:
 ##for (alpha,beta):pair in partition_pairs(n)
   do if (#alpha).is_odd then [] { must have even number of cycles in alpha }
      elif != alpha or for l in beta do l.is_odd od.any { whether unsplit }
      then [pair.cycles.unsplit_class]
      else { alpha is empty, beta has all even parts }
         [(beta,false).split_class, (beta,true).split_class ]
      fi
   od

set Dn_character (Dn_irrep chi, Dn_class C) = int:
   assert(chi.rank = C.rank,"Size mismatch");
   case chi
   | pair.unsplit_irr:
     case C
     | class.unsplit_class: hyperoctahedral_character(pair,class)
     | (alpha,).split_class:
        hyperoctahedral_character(pair,for l in alpha do (l,false) od)
     esac
   | (lambda,epsilon).split_irr:
     case C
     | class.unsplit_class:
       let (q,r) = hyperoctahedral_character((lambda,lambda),class)\%2 in
       assert(=r,"Odd character value at unsplit class"); q
     | (alpha,delta).split_class:
       let Hn_char = hyperoctahedral_character
                     ( (lambda,lambda), for l in alpha do (l,false) od )
       ,   Sn_char = assert(=alpha%2,"Split class with odd cycle(s)")
                   ; Murnaghan_Nakayama(lambda, alpha\2)
       then (q,r) = (Hn_char+sign(epsilon!=delta)*2^#alpha*Sn_char)\%2
       in assert(=r,"Parity problem for split-split character value"); q
     esac
   esac



{			    Formal power series				}
pentagonal_series : inf_list:
@:(1
  , (1,false,1).
    (rec_fun f (int k, bool upper, int i) inf_list:
     @: if i+i= if upper else k*(3*k-1) then k*(3*k+1) fi
        then (minus_1^k, f(k+#upper,not upper,i+1))
        else (0,f(k,upper,i+1))
        fi
    )
  )

set n_parts = memoize(inverse(pentagonal_series))
set n_partitions (int n) = int:
  let (x,ff)=n_parts() in for :n do set(x,ff):=ff() od; x
