<misc.at
<K.at
{ ---------------- LKT(p): list of K_types ---------------- }

{ this is simply a list [K_type] of K_types, i.e.
  final standard limit tempered parameters
  LKTs(Param p) has value [K_type]
  simply set nu=0, apply finalize, and discard nu=0 terms
  define LKT(Param p) of type K_Type, provided it is unique
}
set LKTs (Param p) = [K_Type]: for q in finalize(p*0) do K_type(q) od
set LKT (Param p) = K_Type: let lkts=LKTs(p) in assert(#lkts=1,"More than one LKT; use LKTs"); lkts[0]

{ given (x,lambda): x in distinguished fiber, lambda in  X^*
  lambda restricted to H^\delta is the highest weight of a representation of K_x
  replace (x,lambda) with (y,mu) where mu is highest weight for K_y
  algorithm: find w\in W_G taking rho(K_x) to rho(K_y) using cross_W_orbit
  (x,lambda)->(y,w\lambda)
}

{ shouldn't be used:
set move_weight (KGBElt x,KGBElt y,ratvec lambda) = (KGBElt,ratvec):
  let G=real_form(x) in assert(real_form(y)=G,"Real form mismatch");
  let w=find_W_cross(x,y) in (y,act(w,lambda))
}
{
set move_finite_dimensional (KGBElt x,KGBElt y,Param p) = Param:
  let (,hw)=move_weight((x,highest_weight_finite_dimensional(p)),y)
  in finite_dimensional(K_0(real_form(y)),hw)
}

{ lowest K-type of (limit of) discrete series on M }
{set M_LKT  (Param p) = ratvec:
  let x=x(p)
  then lambda = involution(x)* { why? what follows is already fixed by theta }
      (infinitesimal_character(p)-nu(p))
  , delta = distinguished_involution(real_form(p))
  in projection_mod_image(1-delta)*ratvec_as_vec(lambda+rho_i(x)-2*rho_ci(x))
}
{moved highest_weight@(...) and highest_weights@(...) to K_highest_weights}

{ -------- K-type as parameter for the identity component of K ------------ }

{also moved to K_highest_weights}


{ --------------- printing and other auxiliary routines ------------- }
{
set print_LKTs (Param p) = void:
  let lkts=LKTs(p) in
  for q in lkts
  do let mu=K0_param(q) then (x,v)=highest_weight(mu) in
    prints("highest weight=", v, new_line
          , "fund. wt. coords:", fundamental_weight_coordinates(x,v),new_line
          ,"length=", length(x,v),new_line,"dim= ", dimension(mu))
  od
}