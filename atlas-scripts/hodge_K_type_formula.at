<hodge_functions.at
<K_type_formula.at
<hodge_normalize.at
<bigMatrices.at {for is_non_negative@i_poly_mat}
<tensor_product.at

set hodge_K_type_formula_verbose=true
set hkdebug(string s)=void:
 if hodge_K_type_formula_verbose then prints(s) else () fi
 
set fill_out([K_Type] ktypes, int N)=[K_Type]:
let new_ktypes=ktypes in
for mu in ktypes do
 for tau in monomials(branch(parameter(mu),N)) do
  if find(new_ktypes,LKT(tau))=-1 then new_ktypes#:=LKT(tau) fi
 od
od;new_ktypes

set fill_out_recursively([K_Type] ktypes, int N)=
let rec_fun f([K_Type] ktypes_in)=[K_Type]: 
 let new=fill_out(ktypes_in,N) in 
 if #new=#ktypes_in then sort_by_height(new) else f(new) fi in  f(ktypes)

set hodgePrintPolyMatrix(i_poly_mat M,int space_size)= void:
  let space= " "*space_size, wd = max(for v in ##M do #poly_format(v,"v") od)
  in
    for row in M
    do prints(##for v in row do space+l_adjust(wd,poly_format(v,"v")) od)
    od
set hodgePrintPolyMatrix (i_poly_mat M) = void: hodgePrintPolyMatrix(M,3)

{
set mu (Param p) = rat:
  (p.x.torus_factor+p.real_form.rho_check) * lambda_plus_rho_res_T(p.x,p.lambda)
}

set mu_0(KGBElt x,vec v)=rat:
 (x.torus_factor+x.real_form.rho_check) * (1+x.involution)*v/2

set mu(KGBElt x,vec v)=int:
 rat_as_int((x.torus_factor+x.real_form.rho_check) * (1+x.involution)*v/2)

set get_m(KGBElt x_L,Param q, vec v,RealForm G)=
 let q_G_0=theta_induce_standard_warning(parameter(x_L,q.lambda,null(q.root_datum.rank)),G,false) in
{ q_G=first_param(finalize(theta_induce_standard_warning(parameter(x_L,q.lambda+v,null(q.root_datum.rank)),G,false)))  in }
{ mu(q_G)-}mu(q_G_0)

{set Omega_S_inverse(hodge_function f,[K_Type] S)=hodgeParamPol:Phi_S_inverse(Psi_S(f,S),S)}
{first define null versions}
{set T=torus(0,0,0)
set Omega_S_inverse(hodge_function f,[K_Type] S)=nullHodgeParamPol(T)
set hodge_tensor_exterior_u_cap_s_std(Param p,Parabolic P)=hodge_function:nullHodgeFunction(T)

set hodge_K_type_formula_new(K_Type mu, int N)=([Param],hodgeParamPol):([],nullHodgeParamPol(T))
}

{set hodge_K_type_formula_new(K_Type mu_G_orig, int N)=([Param],hodgeParamPol):}
set hodge_K_type_formula_new(K_Type mu_G_orig, int N)=hodgeParamPol:
let
G_orig=mu_G_orig.real_form then
rv=hodgeParamPol:nullHodgeParamPol(G_orig) then
()=hkdebug(new_line + "Main: mu_G_orig="+mu_G_orig.to_string+ " "+ mu_G_orig.real_form.to_string) then
{RECURSIVE FUNCTION}
rec_fun hodge_K_type_formula_recursive(K_Type mu)=hodgeParamPol:
  let G=mu.real_form then
  rv_G=nullHodgeParamPol(G) then
  ()=hkdebug(new_line+ "recursive: " + new_line + "G_orig="+ G_orig.to_string+ new_line + "G=" + G.to_string + "mu="+mu.to_string+ " "+ mu.real_form.to_string) then
  (P,mu_L)=tau_q(mu) then
  L=Levi(P) then
  ()=hkdebug(new_line+ "(R)L= "+ L.to_string+" mu_L="+mu_L.to_string+new_line) then
  ktypes=fill_out_recursively([mu],N) then  {K_types for G}
  ()=
   assert(dimension(mu_L)=1,"mu_L is not one-dimensional");
   assert(let ind=theta_induce_standard(mu_L*0,G) in
     #ind=1 and first_param(ind)=parameter(mu),"mu_L does not induce to mu");
   assert(theta_induce_standard(mu_L,G)*0=theta_induce_standard(mu_L*0,G), "mismatch") then
  cf=character_formula_one_dimensional(mu_L)   {mu_L is 1-dimensional} then
  cf_0=rearrange(hodge_recursive_deform(cf))   {[(vec,Param)]} {each nu=0} in
  let ()=hkdebug("(R)cf_0=" + cf_0.to_string) in
  for (c,p_L)@j in cf_0 do   {c\in Z, p_L\in P_t(L)}
   let ()=hkdebug(new_line+"(R)  p_L:" + p_L.to_string) in
   let  (Q_j,mu_L_j)=tau_q(LKT(p_L)) then
   tensor=(
    let
      hodge_K_type_mat_long(K_Type mu, int N,[K_Type] ktypes)=(int,[K_Type],i_poly_mat,i_poly_mat):
      let ()=hkdebug("(R)hodge_K_type_mat_long: " + mu.to_string + " " + mu.real_form.to_string+ new_line+ "# of ktypes: "+ #ktypes.to_string) in
  {    let warnings=[Param]:[] then}
     let    M=zero_poly_matrix(#ktypes) in
     for tau in ktypes do
      let index=find(ktypes,tau) then
      row=zero_poly_row(#ktypes) then
      hktf=hodge_K_type_formula_recursive(tau) then
      rf=rearrange(hktf) in
      for (g,kappa) in rf do
       let j=find(ktypes,LKT(kappa)) in
        if j!=-1 then row[j]:=g fi
      od;
       M[index]:=row
     od;
     let tM=transpose(M) in  {tM is lower triangular}
     (find(ktypes,mu),ktypes,tM, lower_unitriangular_inverse(tM))
     then
    {===========================================================================}
    {definition of Phi_S}
     Phi_S(Param p, int N)=KHodgeParamPol:
      let (index,ktypes,A,B)=hodge_K_type_mat_long(LKT(p),N,fill_out_recursively([LKT(p)],N)) then
      vector=transpose(B)[index] then
      temp=[(vec,Param)]:[] in
       for i:#vector do if vector[i]!=null(0) then
        temp#:=(vector[i],parameter(ktypes[i])) fi
       od;
     dearrange(temp,())  {/Phi_S(p,N)}
     then
     Phi_S(hodgeParamPol P, int N)=KHodgeParamPol:
      let ()=prints("(R)Phi_S: ", P.real_form) in
      let Q=rearrange(P) then
      rv_K=nullKHodgeParamPol(P.real_form) in
      for (c,p) in Q do rv_K+:=c*Phi_S(p,N) od;
     rv_K  {/Phi_S([P],N)}
     then
     hodge_branch_std(Param p, int N)=KHodgeParamPol:
     Phi_S(hodge_recursive_deform(p),N)  {/hodge_branch_std}
      then
     {===========================================================================}
     hodge_function_std(Param p)=hodge_function:
    ((K_Type mu):coefficient(hodge_branch_std(p,K_norm(mu)),parameter(mu)),p.real_form)
    then
    dual((KGBElt ->[ratvec]) weights)=(KGBElt->[ratvec]):(KGBElt x):for v in weights(x) do -v od
    then
    {-------------------------------------------------------------------}
    hodge_tensor(hodge_function f, (KGBElt -> [ratvec]) weights,K_Type mu)=i_poly:
     let rv_ht=poly_0 in for c@p in tensor_product(mu,dual(weights)) {K_Type_Pol}
     do let mu=LKT(p) in rv_ht:=poly_plus(rv_ht,split_as_int(c)*f.f(mu)) od;rv_ht
    then
    hodge_tensor_std(Param p, (KGBElt -> [ratvec]) weights,K_Type mu)=i_poly:hodge_tensor(hodge_function_std(p),weights,mu)
    then
    hodge_tensor_std_as_function(Param p, (KGBElt -> [ratvec]) weights)=hodge_function:((K_Type mu):hodge_tensor_std(p,weights,mu),p.real_form)
    then
    hodge_tensor_wedge_k_u_cap_s_std_as_function(Param p,Parabolic P_1,int k)=hodge_function:
     {get out of the induction!}
     if k=0 then branch_function_std_as_hodge_function(p)
     else 
     let weights=sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P_1, k) in minus_vee_to_the_k(k)*hodge_tensor_std_as_function(p,weights)
     fi
    then
    hodge_tensor_exterior_u_cap_s_std_as_function(Param p,Parabolic P)=hodge_function:
     let rv_hf=nullHodgeFunction(P.real_form) in
      {get out of the induction!}
      if #nilrad_roots(P)=0 then branch_function_std_as_hodge_function(p)
      else
      for k:#nilrad_roots(P)+1  {NOTE +1}
      do rv_hf+:=hodge_tensor_wedge_k_u_cap_s_std_as_function(p,P,k) od;rv_hf
      fi
    then
    Phi_S_inverse(KHodgeParamPol KP,[K_Type] S)=hodgeParamPol:
     let rec_fun solve_one(KHodgeParamPol KP,[K_Type] S,hodgeParamPol rv_hp)=hodgeParamPol:
     let n=first(for mu in S do !=coefficient(KP,mu) od) in
      if n=-1 then rv_hp
      else
       let c=coefficient(KP,S[n]) then
        p=parameter(S[n]) in
        solve_one(KP-Phi_S(c*p,max(for mu in S do K_norm(mu) od)),S,rv_hp+c*p)
      fi
     in solve_one(KP,S,nullHodgeParamPol(KP.real_form))  {start the recursion}
    then {definition of Omega_S_inverse:}
    Omega_S_inverse(hodge_function f,[K_Type] S)=hodgeParamPol:Phi_S_inverse(Psi_S(f,S),S)
    in
    let A=hodge_tensor_exterior_u_cap_s_std_as_function(p_L,P) in
    let B=Omega_S_inverse(A,ktypes) in
    let z=Omega_S_inverse(hodge_tensor_exterior_u_cap_s_std_as_function(p_L,P),ktypes){nullHodgeParamPol(G)} in z
  ){/tensor=}
    in
    let ()=hkdebug("(R) tensor = " + tensor.to_string + new_line+"(R)real form: " + tensor.real_form.to_string)  in
   rv_G+:=hodge_theta_induce_standard(tensor,G)
  od{for (c,p_L)}
  ;hkdebug("DONE" +  new_line + "real form: " +  new_line+ "rv=" + rv.to_string + rv.real_form.to_string);
{value of rec_fun hodge_K_type_formula_recursive:}rv_G
in hodge_K_type_formula_recursive(mu_G_orig)


  
  {hodge version of K_type_formula
  old version, only works if no HS identities needed,
for example complex case
_new version not working yet (see above)
}
{set hodge_K_type_formula_old(K_Type mu)=([Param],hodgeParamPol):}
set hodge_K_type_formula_old(K_Type mu)=([Param],hodgeParamPol):
let G=mu.real_form then
(P,mu_L)=tau_q(mu) then
L=Levi(P) then
 ()=assert(dimension(mu_L)=1,"mu_L is not one-dimensional");
 assert(let ind=theta_induce_standard(mu_L*0,G) in
 #ind=1 and first_param(ind)=parameter(mu),"mu_L does not induce to mu") then
 ()=assert(theta_induce_standard(mu_L,G)*0=theta_induce_standard(mu_L*0,G), "mismatch") then
rv=hodgeParamPol:[] then
warnings=[Param]:[] then
cf=character_formula_one_dimensional(mu_L)   {mu_L is 1-dimensional} then
cf_0=rearrange(hodge_recursive_deform(cf)) in  {[(vec,Param)]}
for (c,q) in cf_0 do
let x_L=q.x then
x_G=embed_KGB(x_L,G) then
q_G_0=theta_induce_standard_warning(parameter(x_L,q.lambda,null(q.root_datum.rank)),G,hodge_K_type_formula_verbose) in
let shifts=u_cap_s_rho_shifts_and_cardinalities(P,x_G) in
 for (v,k) in shifts do
  let  (new,coeff)=
  {only add shift v to lambda, not nu, all nu's are 0}
  let q_G=assert(=nu(q),"nu(q)\ne 0");
  theta_induce_standard_warning(parameter(x_L,q.lambda+v,null(q.root_datum.rank)),G,hodge_K_type_formula_verbose) then
   m_0=mu(q_G)-mu(q_G_0) then
   m_floor=floor(m_0) in
{   m=floor(m_0) {should be an integer?} in}
{   m_0=mu(first_param(hodge_normalize(q_G)[0]))-mu(q_G) then}
   if hodge_K_type_formula_verbose then
    prints("----------------",new_line,"q_G:",q_G, " [",height(q_G),"]");
    prints("c=", c);
    prints("k=: ", k);
    prints("m_0=: ", m_0);
    prints("m_floor=: ", m_floor);
    if not is_integer(m_0) then prints("Warning: m_0=", m_0, "  is not an integer") fi;
    prints("mu(q_G_0)=", mu(q_G_0));
    prints("mu(q_G)=", mu(q_G))
   fi;
  {cases: is_zero(q_G); !is_normal(q_G); !is_standard(q_G); !is_final(q_G)}
  {CASES}
  if is_zero(q_G) then (nullHodgeParamPol(G),poly_1)
  else
   let hrd=hodge_recursive_deform(hodge_normalize(q_G)) in
   if hodge_K_type_formula_verbose then
    prints("q_G=",q_G,new_line, "shift:", v);
    prints("hrd=", hrd, new_line, "k=", k)
   fi;
{  (hrd,let m=rat_as_int(mu(first_param(hrd[0]))-mu(q_G_0)) in prints("now m=",m);poly_product(c,(-1)^k*vee^m)) }
{  (hrd,poly_product(c,(-1)^k*vee^m_floor))}
  (hrd,poly_product(c,(-1)^k*vee^k))
  fi in
  {/CASES}
     if hodge_K_type_formula_verbose then
       prints("added:");print(coeff*new);prints()
     fi;
  rv+:=coeff*new
 od {for (v,k)}
od; {for (c,q)}
(warnings,rv)

{temporary fix:}

set hodge_K_type_formula(K_Type mu,int N)=([Param],hodgeParamPol):hodge_K_type_formula_old(mu)
set hodge_K_type_formula(K_Type mu,int N)=hodgeParamPol:hodge_K_type_formula_new(mu,N)

{matrix with rows/columns indexed by [K_Type]:ktypes,  long output}
{long version depends on hodge_K_type_formula which isn't implemented yet}
set hodge_K_type_mat_long(K_Type mu, int N,[K_Type] ktypes)=(int,[K_Type],i_poly_mat,i_poly_mat):
{let warnings=[Param]:[] then}
let
M=zero_poly_matrix(#ktypes) in
for tau in ktypes do
 let index=find(ktypes,tau) then
 row=zero_poly_row(#ktypes) then
{ (new_warnings,hktf)=hodge_K_type_formula(tau,N) then}
 hktf=hodge_K_type_formula(tau,N) then
 rf=rearrange(hktf) in
 for (g,kappa) in rf do
  let j=find(ktypes,LKT(kappa)) in
   if j!=-1 then row[j]:=g fi
 od;
 M[index]:=row
{ warnings##:=new_warnings}
od;
let tM=transpose(M) in  {tM is lower triangular}
(find(ktypes,mu),ktypes,tM, lower_unitriangular_inverse(tM))

{default: use fill_out_recursively to generate ktypes}
set hodge_K_type_mat_long(K_Type mu, int N)=(int,[K_Type],i_poly_mat,i_poly_mat):
hodge_K_type_mat_long(mu,N,fill_out_recursively([mu],N))

{short versions, only return i_poly_mats}
set hodge_K_type_mat(K_Type mu, int N,[K_Type] ktypes)=(i_poly_mat,i_poly_mat):let(,,A,B)=hodge_K_type_mat_long(mu,N,ktypes)
in (A,B)

set hodge_K_type_mat(K_Type mu, int N)=(i_poly_mat,i_poly_mat):hodge_K_type_mat(mu,N,fill_out_recursively([mu],N))

set test_hodge_K_type_mat(K_Type mu,int N)=(i_poly_mat,[bool],bool):
let (A,B)=hodge_K_type_mat(mu,N) in let
results=for i:#B do is_non_negative(transpose(B)[i]) od in (B,results,all(results))

set test_hodge_K_type_mat([K_Type] mus,int N)=([([[vec]],bool)],bool):
let pairs=for mu@i in mus do let (N,,r)=test_hodge_K_type_mat(mu,N) in (N,r) od in
(pairs, all( for (,r) in pairs do r od))

{graded version of branching_formula
 in the 1 Cartan case should give same result as hodge_branch_std_builtin
 hope to modify it to work for all G
}
{hodge branching formula for standard module with nu=0}
{was called hodge_branch_std_tempered, renamed to Phi_S
see hodgeTempered.pdf (towards the end) and hodge_tensor.at}
set Phi_S(Param p, int N)=KHodgeParamPol:
let (index,ktypes,A,B)=hodge_K_type_mat_long(LKT(p),N) then
vector=transpose(B)[index] then
temp=[(vec,Param)]:[] in
 for i:#vector do if vector[i]!=null(0) then
 temp#:=(vector[i],parameter(ktypes[i])) fi od;
dearrange(temp,())

{hodge branching formula for ParamPol of modules with nu=0}
set Phi_S(ParamPol P, int N)=KHodgeParamPol:
let rv=nullKHodgeParamPol(P.real_form) in
 for c@p in P do rv+:=c*Phi_S(p,N) od;rv

{hodge branching formula for arbitrary irreducible}
{need: hodge_character_formula(Param p)}
{set hodge_branch_irr(Param p,int N)=hodgeParamPol:}

{hodge branching formula for hodgeParamPol of tempered modules}
set Phi_S(hodgeParamPol P, int N)=KHodgeParamPol:
let Q=rearrange(P) then
rv=nullKHodgeParamPol(P.real_form) in
 for (c,p) in Q do rv+:=c*Phi_S(p,N) od;
rv

set Phi_S(Param p, [K_Type] S)=KHodgeParamPol:Phi_S(p,max(for mu in S do K_norm(mu) od))
set Phi_S(ParamPol P, [K_Type] S)=KHodgeParamPol:Phi_S(P,max(for mu in S do K_norm(mu) od))
set Phi_S(hodgeParamPol P, [K_Type] S)=KHodgeParamPol:Phi_S(P,max(for mu in S do K_norm(mu) od))

{hodge branching formula for arbitrary standard module p
 algorithm: Phi_S(hodge_recursive deform(p))
}
set hodge_branch_std(Param p, int N)=KHodgeParamPol:
Phi_S(hodge_recursive_deform(p),N)

{hodge branching formula for arbitrary ParamPol of standard modules}
set hodge_branch_std(ParamPol P, int N)=KHodgeParamPol:
Phi_S(hodge_recursive_deform(P),N)

set hodge_branch_std(hodgeParamPol P, int N)=KHodgeParamPol:
let rv=nullKHodgeParamPol(P.real_form) in
for i:#P do rv+:=shift(hodge_branch_std(P[i],N),i) od;rv

{the hodge function of I(p)}
{moved from hodge_functions.at}
set hodge_function_std(Param p)=hodge_function:
((K_Type mu):coefficient(hodge_branch_std(p,K_norm(mu)),mu),p.real_form)

set column([K_Type] ktypes,i_poly_mat M,int i)=
let col=transpose(M)[i] in 
dearrange(for j:#col do (col[j],ktypes[j]) od )

