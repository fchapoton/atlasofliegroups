<hodge_functions.at
<K_type_formula.at
<bigMatrices.at {for is_non_negative@i_poly_mat}
<tensor_product.at

set hodge_K_type_formula_verbose=false  {short for hodge_K_type_formula_verbose}

{for each K_type mu in ktypes, append all K_Types of parameter(mu),
up to height N, to ktypes
}
set fill_out([K_Type] ktypes, int N)=[K_Type]:
let new_ktypes=ktypes in
for mu in ktypes do
 for tau in monomials(branch(parameter(mu),N)) do
  if find(new_ktypes,LKT(tau))=-1 then new_ktypes#:=LKT(tau) fi
 od
od;new_ktypes

set fill_out_recursively([K_Type] ktypes, int N)=
let rec_fun f([K_Type] ktypes_in)=[K_Type]: 
 let new=fill_out(ktypes_in,N) in 
 if #new=#ktypes_in then sort_by_height(new) else f(new) fi in  f(ktypes)

set hodgePrintPolyMatrix(i_poly_mat M,int space_size)= void:
  let space= " "*space_size, wd = max(for v in ##M do #poly_format(v,"v") od)
  in
    for row in M
    do prints(##for v in row do space+l_adjust(wd,poly_format(v,"v")) od)
    od
set hodgePrintPolyMatrix (i_poly_mat M) = void: hodgePrintPolyMatrix(M,3)

{from convert_c_form.at, mu is used to convert from Hermitian form to c-form:
set mu (Param p) = rat:
  (p.x.torus_factor+p.real_form.rho_check) * lambda_plus_rho_res_T(p.x,p.lambda)
}

{given a list of params, return list of unique params occuring}
set unique([Param] list)=[Param]:
if #list=0 then [] else
let rv=null_module(list[0].real_form) in
for p in list do rv+:=p od;monomials(rv) fi

{union of list of params}
set union([[Param]] lists)=[Param]:
let params=[Param]:[] in
for list in lists do params##:=list od;unique(params)

{given a list of K_types, return list of unique params occuring}
set unique([K_Type] list)=[K_Type]:
if #list=0 then [] else
let rv=null_module(list[0].real_form) in
for p in list do rv+:=parameter(p) od;
for p in monomials(rv) do LKT(p) od fi

{union of list of K_types}
set union([[K_Type]] lists)=[K_Type]:
let ktypes=[K_Type]:[] in
for list in lists do ktypes##:=list od;unique(ktypes)

set starting_set_of_K_types(K_Type mu,Parabolic P,int N)=
let
weights=sums_nci_nilrad_roots_restricted_to_H_theta(P) then
params=monomials(standardize(parameter(mu)+add_weights(parameter(mu),weights))) in
{prints(params);}
union(for p in parameter(mu)#params do
 for q in monomials(branch_std(p,N)) do LKT(q) od
 od)

{Main function in this file: see hodgeTempered.pdf, Sections 5-7}
{This is a deeply recursive function. It repeats the same
calculation many times - hopefully this can be ameliorated}
set hodge_K_type_formula(K_Type mu_G_orig, int N)=hodgeParamPol:
let
counter=0 then
depth=0 then
G_orig=mu_G_orig.real_form then
rv=hodgeParamPol:nullHodgeParamPol(G_orig) then
{RECURSIVE FUNCTION}
rec_fun hodge_K_type_formula_recursive(K_Type mu)=hodgeParamPol:
  let G=mu.real_form then
  ()=counter:=counter+1 then
    ()=depth:=depth+1 then
  rv_G=nullHodgeParamPol(G) then
  ()=if hodge_K_type_formula_verbose then prints(new_line,"-------------------",new_line,"main recursion:", new_line,"counter: ",counter,new_line,"depth: ",depth,new_line,"G_orig=", G_orig,new_line,
     "G=", G, new_line,"mu: ",mu,new_line, "mu.real_form: ",mu.real_form) fi
  then
  (P,mu_L)=tau_q(mu) then
  L=Levi(P) then
  ()=if hodge_K_type_formula_verbose then prints("L: ",L,new_line,"mu_L=",mu_L) fi then
  ()=
   assert(dimension(mu_L)=1,"mu_L is not one-dimensional");
   assert(let ind=theta_induce_standard(mu_L*0,G) in
     #ind=1 and first_param(ind)=parameter(mu),"mu_L does not induce to mu");
   assert(theta_induce_standard(mu_L,G)*0=theta_induce_standard(mu_L*0,G), "mismatch") then
  cf=character_formula_one_dimensional(mu_L)   {mu_L is 1-dimensional} then
  deformed=hodge_recursive_deform(cf) then
  cf_0=rearrange(deformed)   {this is what we need: [(vec,Param)]} {each nu=0} in
  let ()=if hodge_K_type_formula_verbose then prints("cf: (on L)");print(deformed) fi in
  for (c,p_L)@j in cf_0 do   {c\in Z, p_L\in P_t(L)}
   let ()=if hodge_K_type_formula_verbose then prints(new_line,"j: ",j, "/", #cf_0,new_line, L, new_line,"p_L: ", p_L, new_line, "c: ",poly_format(c,"v")) fi in
   let  (Q_j,p_L_j_with_nu)=tau_q(LKT(p_L)) then
   L_j=Levi(Q_j) then 
   p_L_j=p_L_j_with_nu*0 {see definition of tau_q in K_types_plus.at} then
   ()=if hodge_K_type_formula_verbose then prints("L_j: ", L_j, new_line, "p_L_j: ", p_L_j) fi then
   tensor=(
    {long list of local function definitions, these are the same as some functions in hodge_tensor.at
     I've appended "_local" to the names to be sure there is no confusion about which is being called}
    let
  {*}hodge_K_type_mat_long_local(K_Type mu, int N,[K_Type] ktypes)=(int,[K_Type],i_poly_mat,i_poly_mat):
     let ()=if hodge_K_type_formula_verbose then prints("SUB: hodge_K_type_mat_long_local", " ", mu, " ", mu.real_form) fi in
     let ()=if hodge_K_type_formula_verbose then prints("START hodge_K_type_mat_long_local:", new_line, "mu: ", mu, new_line, "mu.real_form: ", mu.real_form,
      new_line, "# of Ktypes: ", #ktypes) fi in
     let    M=zero_poly_matrix(#ktypes) in
     for tau in ktypes do
      let index=find(ktypes,tau) then
      row=zero_poly_row(#ktypes) then
      ()=if hodge_K_type_formula_verbose then prints("calling hodge_K_type_formula_recursive for",new_line,"real form: ",tau.real_form, new_line, "tau=",tau) fi then
      hktf=hodge_K_type_formula_recursive(tau) {local: calls this recursive function} then
      ()=if hodge_K_type_formula_verbose then prints("got hodge K-type formula:", new_line, hktf.real_form, new_line,hktf) fi then
      rf=rearrange(hktf) in
      for (g,kappa) in rf do
       let j=find(ktypes,LKT(kappa)) in
        if j!=-1 then row[j]:=g fi
      od;
       M[index]:=row
     od;
     let tM=transpose(M) in  {tM is lower triangular}
       if hodge_K_type_formula_verbose then prints("size of matrices: ", shape(tM), new_line, "END hodge_K_type_mat_long_local") fi;
       (find(ktypes,mu),ktypes,tM, lower_unitriangular_inverse(tM))  {/hodge_K_type_mat_long}
     then
    {definition of Phi_S (local: calls hodge_K_type_mat_long_local)}
  {*}Phi_S_local(Param p, int N)=KHodgeParamPol:
      let ()=if hodge_K_type_formula_verbose then prints("SUB: Phi_S_local(p,N)", " ", p, " ", p.real_form, " ", N) fi in
      let ()=if hodge_K_type_formula_verbose then prints("in Phi_S_local:",new_line,p.real_form,new_line,p) fi in
      if is_abelian(p.real_form) then
        if hodge_K_type_formula_verbose then prints("Done with Phi_S_local for torus: ",p.real_form,new_line,p) fi;([p],())
      else
        let ()=if hodge_K_type_formula_verbose then prints("Not torus: ",p.real_form) fi in 
      let (index,ktypes,A,B)=hodge_K_type_mat_long_local(LKT(p),N,fill_out_recursively([LKT(p)],N))
      then
      ()=if hodge_K_type_formula_verbose then prints("In Phi_S_local with: ", p) fi then
      vector=transpose(B)[index] then
      temp=[(vec,Param)]:[] in
      for i:#vector do if vector[i]!=null(0) then
       temp#:=(vector[i],parameter(ktypes[i])) fi
      od;
      if hodge_K_type_formula_verbose then prints("Done with Phi_S_local for ", new_line, p.real_form, new_line, p) fi;
     dearrange(temp,()) fi  {/Phi_S_local(p,N)}
     then
  {*}Phi_S_local(hodgeParamPol P, int N)=KHodgeParamPol:  {local: calls Phi_S_local}
      let ()=if hodge_K_type_formula_verbose then prints("SUB Phi_S_local(P,N):",  P, " ", P.real_form, " ", N) fi in
      if is_abelian(P.real_form) then (P,()) else
      let Q=rearrange(P) then
      rv_K=nullKHodgeParamPol(P.real_form) in
      for (c,p) in Q do rv_K+:=c*Phi_S_local(p,N) od;
     rv_K fi  {/Phi_S_local([P],N)}
     then
  {*}hodge_branch_std_local(Param p, int N)=KHodgeParamPol: {local: calls Phi_S_local}
      let ()=if hodge_K_type_formula_verbose then prints("SUB: hodge_branch_std_local(p,N)", p, " ", p.real_form, " ", N) fi in
      Phi_S_local(hodge_recursive_deform(p),N)   
     then
  {*}hodge_function_std_local(Param p)=hodge_function:  {local: calls hodge_branch_std_local}
      let ()=if hodge_K_type_formula_verbose then prints("SUB: hodge_function_std_local(p)", p, " ", p.real_form) fi in
      let rv=((K_Type mu):coefficient(hodge_branch_std_local(p,K_norm(mu)),parameter(mu)),p.real_form) in
      if hodge_K_type_formula_verbose then prints("Done SUB hodge_function_std_local:", p) fi;rv
     then
      dual((KGBElt ->[ratvec]) weights)=(KGBElt->[ratvec]):(KGBElt x):for v in weights(x) do -v od
     then
  {*}hodge_tensor_local(hodge_function f, (KGBElt -> [ratvec]) weights,K_Type mu)=i_poly:
     let ()=if hodge_K_type_formula_verbose then prints("SUB: hodge_tensor_local(f,wts,mu)", f.real_form, " ", mu, " ", mu.real_form) fi in
     let rv_ht=poly_0 in
     for c@p in tensor_product(mu,dual(weights)) {K_Type_Pol} do
      let mu=LKT(p) in rv_ht:=poly_plus(rv_ht,split_as_int(c)*f.f(mu))
     od;rv_ht  {/hodge_tensor}
     then
  {*}hodge_tensor_std_local(Param p, (KGBElt -> [ratvec]) weights,K_Type mu)=i_poly:  {local: calls hodge_tensor}
       let ()=if hodge_K_type_formula_verbose then prints("SUB: hodge_tensor_std_local(p,wts,mu)  ",p.real_form, " ",p, " ", mu) fi in
       let f=hodge_function_std_local(p) then
       ()=if hodge_K_type_formula_verbose then prints("in hodge_tensor_std_local, computed hodge_function_std_local(p) ", p.real_form,"  ",p) fi in
       let rv=hodge_tensor_local(f,weights,mu) in
       if hodge_K_type_formula_verbose then prints("done SUB: hodge_tensor_std_local(p,wts,mu)",p.real_form," ",p," ",mu) fi;rv
     then
  {*}hodge_tensor_std_local(Param p, (KGBElt -> [ratvec]) weights)=hodge_function:((K_Type mu): {local: calls hodge-tensor_std}
      let ()=if hodge_K_type_formula_verbose then prints("SUB: hodge_tensor_std_local(p,wts)", " ",p.real_form," ",p) fi in
      let h=hodge_tensor_std_local(p,weights,mu) in 
       if hodge_K_type_formula_verbose then prints("done SUB hodge_tensor_std_local(p,wts)", p.real_form," ",p) fi;
      h,p.real_form)
     then
  {*}hodge_tensor_wedge_k_u_cap_s_std_local(Param p,Parabolic P_1,int k)=hodge_function:  {local: hodge_tensor_std_local}
        let ()=if hodge_K_type_formula_verbose then prints("SUB:  hodge_tensor_wedge_k_u_cap_s_std_local(p,P_1,k)", " ", p, " ", p.real_form, " ", k) fi in
     {get out of the induction!}
     if k=0 then
       let ()=if hodge_K_type_formula_verbose then prints("k=0 in wedge, no recursion needed") fi in
       let temp=hodge_function_std_local(p) in {prints("compute temp");}temp
     else
     let weights=sums_nci_nilrad_roots_wedge_k_restricted_to_H_theta(P_1, k) in
      minus_vee_to_the_k(k)*hodge_tensor_std_local(p,weights)
     fi
     then
  {*}hodge_tensor_exterior_u_cap_s_std_local(Param p,Parabolic P)=hodge_function:  {local: calls hodge_tensor_wedge...}
     let ()=if hodge_K_type_formula_verbose then prints("SUB:  hodge_tensor_exterior_u_cap_s_std_local(p,P_1)", " ", p, " ", p.real_form) fi in
     let rv_hf=nullHodgeFunction(p.real_form) in
     {get out of the induction!}
     if #nilrad_roots(P)=0
      then if hodge_K_type_formula_verbose then prints("exiting hodge_tensor_exterior_u_cap_s_std_local for #nilrad_roots(P)=0") fi;
      branch_function_std_as_hodge_function(p)
     else
      for k:#nilrad_roots(P)+1  {NOTE +1}
      do rv_hf+:=hodge_tensor_wedge_k_u_cap_s_std_local(p,P,k) od;
      if hodge_K_type_formula_verbose then prints("exiting hodge_tensor_exterior_u_cap_s_std_local with nilrad_roots") fi;rv_hf
     fi
     then
  {*}Phi_S_inverse_local(KHodgeParamPol KP,[K_Type] S)=hodgeParamPol: {local: calls Phi_S}
     let ()=if hodge_K_type_formula_verbose then prints("SUB: Phi_S_inverse_local(KP,S)", " ", KP, " ", KP.real_form) fi in
     let ()=if hodge_K_type_formula_verbose then prints("Computing Phi_S_inverse_local on  ", KP.real_form);print(KP) fi in
     let rec_fun solve_one(KHodgeParamPol KP,[K_Type] S,hodgeParamPol rv_hp)=hodgeParamPol:
     let n=first(for mu in S do !=coefficient(KP,mu) od) in
      let ()=if hodge_K_type_formula_verbose then prints("Phi_S_inverse rec_fun: #S=", #S,new_line,"n=",n) fi in
     if n=-1 then rv_hp
      else
       let c=coefficient(KP,S[n]) then
        p=parameter(S[n]) then
	S_new=union([S,for q in monomials(branch_std(p,N)) do LKT(q) od]) in
        solve_one(KP-Phi_S_local(c*p,max(for mu in S_new do K_norm(mu) od)),S_new,rv_hp+c*p)
     fi
     in solve_one(KP,S,nullHodgeParamPol(KP.real_form))  {start the recursion}
     then {definition of Omega_S_inverse_local:}
  {*}Omega_S_inverse_local(hodge_function f,[K_Type] S)=
        let ()=if hodge_K_type_formula_verbose then prints("SUB: Omega_S_inverse_local(f,S)", " ", f.real_form) fi in 
        let rv=hodgeParamPol:Phi_S_inverse_local(Psi_S(f,S),S) in let
	()=if hodge_K_type_formula_verbose then prints("Done calling Omega_S_inverse_local for ", f.real_form, new_line, "returning: ", rv) fi in rv
    {end of local function definitions}
    {THIS IS THE HEART OF THE MATTER:}
    in
    let A=hodge_tensor_exterior_u_cap_s_std_local(p_L_j,P) in   {hodge_function on L_j}
    let ()=if hodge_K_type_formula_verbose then
       for x in KGB(L_j) do prints("x: ",x,new_line,"sums of nci roots: ", sums_nci_nilrad_roots_restricted_to_H_theta(P)(x)) od fi in
    if #nilrad_roots(P)=0 then
      if hodge_K_type_formula_verbose then prints("#nilrad_roots=0, no recursion needed") fi;
      hodgeParamPol:[p_L_j]
    else
     if hodge_K_type_formula_verbose then prints("#nilrad_roots !=0, need recursion") fi;
     let ktypes=starting_set_of_K_types(LKT(p_L_j),P,N) then
     ()=if hodge_K_type_formula_verbose then prints("ktypes:"); for mu in ktypes do prints(mu) od fi then
     B=Omega_S_inverse_local(A,ktypes)  then   {B:hodgeParamPol on L_j}
     ()=if hodge_K_type_formula_verbose then prints("Finished computing B:");print(B) fi in B
    fi
  ){end of subroutines}{/tensor=}{tensor is a hodgeParamPol for L_j}
  in
  let ()=if hodge_K_type_formula_verbose then prints("tensor:");prints("tensor.real_form: ",tensor.real_form);print(tensor) fi  in
  let hodge_ind=hodge_theta_induce_standard(tensor,G)  {hodgeParamPol for G} then
  ()=if hodge_K_type_formula_verbose then
   prints("tensor: (on L_j):");print(tensor.real_form);print(tensor);
   prints("hodge_ind (on G):");print(hodge_ind);
   prints("c: ",poly_format(c,"v"));
   prints("c*hodge_ind:");
   print(c*hodge_ind);
   prints("old rv_G:");print(rv_G);
   prints("new rv_G:");print(rv_G+c*hodge_ind) fi
  then
  ()=if hodge_K_type_formula_verbose then prints("finished j: ", j, "/",#cf_0, "  depth: ", depth,
    new_line,  "L: ", L, new_line, "L_j: ", L_j, new_line, "p_L_j: ", p_L_j) fi in
  rv_G+:=c*hodge_ind
  od;{for (c,p_L)@j1}
 if hodge_K_type_formula_verbose then prints("Done with loop for cf with G:", new_line, G, new_line, "L:", L, new_line,"mu_L: ",mu_L) fi;
  depth:=depth-1;
  if hodge_K_type_formula_verbose then prints("Returning: ", new_line,rv_G.real_form,new_line);print(rv_G) fi;
  rv_G
in if hodge_K_type_formula_verbose then  prints("CALLING RECURSIVE with mu_G_orig:", mu_G_orig, new_line, "on real form:", mu_G_orig.real_form) fi;hodge_K_type_formula_recursive(mu_G_orig)

{matrix with rows/columns indexed by [K_Type]:ktypes;  long output}
set hodge_K_type_mat_long(K_Type mu, int N,[K_Type] ktypes)=(int,[K_Type],i_poly_mat,i_poly_mat):
let
M=zero_poly_matrix(#ktypes) in
for tau in ktypes do
 let index=find(ktypes,tau) then
 row=zero_poly_row(#ktypes) then
 hktf=hodge_K_type_formula(tau,N) then
 rf=rearrange(hktf) in
 for (g,kappa) in rf do
  let j=find(ktypes,LKT(kappa)) in
   if j!=-1 then row[j]:=g fi
 od;
 M[index]:=row
od;
let tM=transpose(M) in  {tM is lower triangular}
(find(ktypes,mu),ktypes,tM, lower_unitriangular_inverse(tM))

{default: use fill_out_recursively to generate ktypes}
set hodge_K_type_mat_long(K_Type mu, int N)=(int,[K_Type],i_poly_mat,i_poly_mat):
hodge_K_type_mat_long(mu,N,fill_out_recursively([mu],N))

{short versions, only return i_poly_mats}
set hodge_K_type_mat(K_Type mu, int N,[K_Type] ktypes)=(i_poly_mat,i_poly_mat):
let(,,A,B)=hodge_K_type_mat_long(mu,N,ktypes) in (A,B)

set hodge_K_type_mat(K_Type mu, int N)=(i_poly_mat,i_poly_mat):
hodge_K_type_mat(mu,N,fill_out_recursively([mu],N))

set test_hodge_K_type_mat(K_Type mu,int N)=(i_poly_mat,[bool],bool):
let (A,B)=hodge_K_type_mat(mu,N) in let
results=for i:#B do is_non_negative(transpose(B)[i]) od in (B,results,all(results))

set test_hodge_K_type_mat([K_Type] mus,int N)=([([[vec]],bool)],bool):
let pairs=for mu@i in mus do let (N,,r)=test_hodge_K_type_mat(mu,N) in (N,r) od in
(pairs, all( for (,r) in pairs do r od))

set hodge_K_type_mat_trivial(RealForm G, int N)=let (a,b,A,B)=hodge_K_type_mat_long(LKT(trivial(G)),N)
in prints("G=",G,new_line,"N=",N,new_line,"set (a,b,A,B)=hodge_K_type_mat_long(trivial(LKT(G)),N)");
prints("columns of A: graded version of the formula for the LKT of standard (finite number of terms)");
prints("columns of B: graded K-multiplicities in the standard module (Hodge grading)");
prints("A=");
printPolyMatrix(A,"v");
prints("B=");
printPolyMatrix(B,"v");
(a,b,A,B)

{hodge branching formula for standard tempered module}
{was called hodge_branch_std_tempered, renamed to Phi_S
see hodgeTempered.pdf (towards the end) and hodge_tensor.at}
set Phi_S(Param p, int N)=KHodgeParamPol:
let (index,ktypes,A,B)=hodge_K_type_mat_long(LKT(p),N) then
vector=transpose(B)[index] then
temp=[(vec,Param)]:[] in
 for i:#vector do if vector[i]!=null(0) then
 temp#:=(vector[i],parameter(ktypes[i])) fi od;
dearrange(temp,())

{hodge branching formula for ParamPol of tempered modules}
set Phi_S(ParamPol P, int N)=KHodgeParamPol:
let rv=nullKHodgeParamPol(P.real_form) in
 for c@p in P do rv+:=c*Phi_S(p,N) od;rv

{hodge branching formula for hodgeParamPol of tempered modules}
set Phi_S(hodgeParamPol P, int N)=KHodgeParamPol:
let Q=rearrange(P) then
rv=nullKHodgeParamPol(P.real_form) in
 for (c,p) in Q do rv+:=c*Phi_S(p,N) od;
rv

set Phi_S(Param p, [K_Type] S)=KHodgeParamPol:Phi_S(p,max(for mu in S do K_norm(mu) od))
set Phi_S(ParamPol P, [K_Type] S)=KHodgeParamPol:Phi_S(P,max(for mu in S do K_norm(mu) od))
set Phi_S(hodgeParamPol P, [K_Type] S)=KHodgeParamPol:Phi_S(P,max(for mu in S do K_norm(mu) od))

{hodge branching formula for arbitrary standard module p
 algorithm: Phi_S(hodge_recursive deform(p))
}
set hodge_branch_std(Param p, int N)=KHodgeParamPol:
Phi_S(hodge_recursive_deform(p),N)

{hodge branching formula for arbitrary ParamPol of standard modules}
set hodge_branch_std(ParamPol P, int N)=KHodgeParamPol:
Phi_S(hodge_recursive_deform(P),N)

set hodge_branch_std(hodgeParamPol P, int N)=KHodgeParamPol:
let rv=nullKHodgeParamPol(P.real_form) in
for i:#P do rv+:=shift(hodge_branch_std(P[i],N),i) od;rv

{the hodge function of I(p)}
{moved from hodge_functions.at}
set hodge_function_std(Param p)=hodge_function:
((K_Type mu):coefficient(hodge_branch_std(p,K_norm(mu)),mu),p.real_form)

set column([K_Type] ktypes,i_poly_mat M,int i)=
let col=transpose(M)[i] in 
dearrange(for j:#col do (col[j],ktypes[j]) od )

