<springer_tables_reductive.at
<truncated_induction.at

{SEVERAL VERSIONS
 associated_variety_ann_old should be ignored: this only works if some permutation is the identity
 associated_variety_ann_inid includes the permutation,
   and uses truncated induction to go from the integrality_datum to G
 associated_variety_ann_res
   similar, but uses restriction instead of truncated induction, using:
   ind_{W(L)}^{W(G)}(sigma_L)= unique irreducible of W(G) with the same degree (b-value)
     containing sigma_L in the restriction
 associated_variety_ann is an alias to associated_variety_ann_res
}

{old versions have been deleted}

{using truncated induction, incorporating permutation}
{only need Springer table for G, character table for L=integrality datum}
{new: includes permutation}
set associated_variety_ann_ind(Param param,SpringerTable st_rd,CharacterTable ct_int,WCell cell)=ComplexNilpotent:
let p=Finalize(param) then
rd_int=integrality_datum(p.root_datum,p.infinitesimal_character) then
(,P)=nice_order(rd_int.derived) then
perm=P.permutation_matrix then
special_character_int=special_character(ct_int,cell,perm) then
character_G=truncate_induce_character(rd_int,p.root_datum,ct_int,st_rd.ct,ct_int.characters[special_character_int]) then
orbit_0=st_rd.springer_inverse(character_G) then
orbit=orbit_by_diagram(p.root_datum,orbit_0.diagram_normalized) in
orbit

{given cell, SpringerTable for G, compute ct_int, using restriction}
set associated_variety_ann_ind(Param p,SpringerTable st_rd,WCell cell)=ComplexNilpotent:
associated_variety_ann_ind(p,st_rd,cell.root_datum.character_table,cell)

{(slow) given cell, compute st_G,ct_int}
set associated_variety_ann_ind(Param p,WCell cell)=ComplexNilpotent:
associated_variety_ann_ind(p,p.root_datum.springer_table,cell.root_datum.character_table,cell)

{given Param, SpringerTable for G and CharacterTable for integrality_datum,compute W_cell}
set associated_variety_ann_ind(Param p,SpringerTable st_G,CharacterTable ct_int)=ComplexNilpotent:
associated_variety_ann_ind(p,st_G,ct_int,W_cell_of(Finalize(p)))

set associated_variety_ann_ind(Param p,SpringerTable st_G)=ComplexNilpotent:
let cell=W_cell_of(Finalize(p)) in  associated_variety_ann_ind(p,st_G,cell.root_datum.character_table,cell)

set associated_variety_ann_ind(Param p)=ComplexNilpotent:
associated_variety_ann_ind(p,p.root_datum.springer_table)

{-----------------using restriction-----------------------}

{assuming integral infinitesimal character, no induction}
set associated_variety_int(SpringerTable st,WCell cell)=ComplexNilpotent:st.springer_inverse(st.ct.special_character(cell))
set associated_variety_int(SpringerTable st)=(WCell->ComplexNilpotent):(WCell cell):associated_variety_int(st,cell)
set associated_variety_int(SpringerTable st,Param p)=ComplexNilpotent:associated_variety_int(st,W_cell_of(Finalize(p)))
set associated_variety_int(SpringerTable st)=(Param->ComplexNilpotent):(Param p):associated_variety_int(st,W_cell_of(Finalize(p)))

{given cell, SpringerTable for G and CharacterTable for integrality_datum, using restriction}
{need RootDatum rd since it isn't specified by cell (only the integrality datum is given by the cell)}
set associated_variety_ann_res(RootDatum rd,SpringerTable st_rd,CharacterTable ct_int,WCell cell)=ComplexNilpotent:
{let G=st_rd.root_datum_parent then}
let ct_rd=st_rd.ct then
L=cell.root_datum then
{ct_int=L.character_table then}
index_pi_int=ct_int.special_character(cell) then
char_int=ct_int.characters[index_pi_int] then
d_int=ct_int.degrees[index_pi_int] then
chars_rd=
##for i:st_rd.ct.n_classes do
{ let ()=prints("i: ",i, " ",  ct_rd.degrees[i], " ", d_int) in }
 if ct_rd.degrees[i]=d_int and
  !=ct_int.inner_product(char_int,restrict_character(rd,L,ct_rd,ct_int,ct_rd.characters[i]))
  then  [i] else [] fi
od
then
index_rd=chars_rd[0] then
orbit_0=st_rd.springer_inverse(index_rd) then
orbit=orbit_by_diagram(rd,orbit_0.diagram_normalized) in
orbit

{given cell, SpringerTable for G, compute ct_L, using restriction}
set associated_variety_ann_res(RootDatum rd,SpringerTable st_rd,WCell cell)=ComplexNilpotent:
associated_variety_ann_res(rd,st_rd,cell.root_datum.character_table,cell)

{(slow) given cell, compute st_rd,ct_L}
set associated_variety_ann_res(RootDatum rd,WCell cell)=ComplexNilpotent:
associated_variety_ann_res(rd,rd.springer_table,cell.root_datum.character_table,cell)

{given Param, SpringerTable for rd and CharacterTable for integrality_datum,compute W_cell}
set associated_variety_ann_res(Param p,SpringerTable st_rd,CharacterTable ct_L)=ComplexNilpotent:
associated_variety_ann_res(p.real_form,st_rd,ct_L,W_cell_of(Finalize(p)))

set associated_variety_ann_res(Param p,SpringerTable st_rd)=ComplexNilpotent:
let cell=W_cell_of(Finalize(p)) in  associated_variety_ann_res(p.real_form,st_rd,cell.root_datum.character_table,cell)

set associated_variety_ann_res(Param p)=ComplexNilpotent:
associated_variety_ann_res(p,p.root_datum.springer_table)

set associated_variety_ann_res_test(SpringerTable st_rd,WCell cell)=
let rd=st_rd.root_datum_parent then
ct_rd=st_rd.ct then
L=cell.root_datum then
ct_L=L.character_table then
index_pi_L=ct_L.special_character(cell) then
char_L=ct_L.characters[index_pi_L] then
d_L=ct_L.degrees[index_pi_L] then
()=prints("OK") in
(rd,L,ct_rd,ct_L,index_pi_L,char_L,d_L){
chars_rd=
##for i:st_rd.ct.n_classes do
 if ct.degrees[i]=d_L and
  !=ct_L.inner_product(char_L,restrict_character(rd,L,ct_rd,ct_L,ct.characters[i]))
  then  [i] else [] fi
od
then
()=prints("OK2") then
{()=prints("chars_rd=",chars_rd) then}
index_rd=chars_rd[0] in
st_rd.springer_inverse(index_rd)
}

{default: associated_variety_ann_res}
set associated_variety_ann(RootDatum rd,SpringerTable st_rd,CharacterTable ct_int,WCell cell)=ComplexNilpotent:
 associated_variety_ann_res(rd,st_rd,ct_int,cell)
set associated_variety_ann(RootDatum rd,SpringerTable st_rd,WCell cell)=ComplexNilpotent:associated_variety_ann_res(rd,st_rd,cell)
set associated_variety_ann(RootDatum rd,WCell cell)=ComplexNilpotent:associated_variety_ann_res(rd,cell)
set associated_variety_ann(Param p,SpringerTable st_rd,CharacterTable ct_int)=ComplexNilpotent:associated_variety_ann_res(p,st_rd,ct_int)
set associated_variety_ann(Param p,SpringerTable st_rd)=ComplexNilpotent:associated_variety_ann_res(p,st_rd)
set associated_variety_ann(Param p)=ComplexNilpotent:associated_variety_ann_res(p)

set GK_dimension(Param p,SpringerTable st)=int:associated_variety_ann(p,st).dim_nilpotent\2
set GK_dimension(SpringerTable st)=(Param->int):(Param p):GK_dimension(p,st)

set GK_dimension(Param p)=int:associated_variety_ann(p,p.root_datum.springer_table).dim_nilpotent\2



