<basic.at
<std_decs.at { predeclare types of rd, ic, G, block, etc. }

rd:=simply_connected ("D5")
ic:=inner_class (rd,"u")
G:=quasisplit_form (ic)
p:=trivial(G)
void: block := block_of(p) { the cast to void suppresses voluminous output }
delta:=distinguished_involution (ic)

: ext_tp = ([Param] p, mat type, mat link0, mat link1)

set eb = ext_tp: extended_block(p,delta)

set fixed_points = [int]: { numbers in original block of parameters in |eb| }
  let i=0 in for q in eb.p do while block[i]!=q do i+:=1 od; i od

set indices = [int]: { positions in |fixed_points| of parameters of interest }
  let i=0 in
  for x in [125,151,152,184,211,212]
  do while fixed_points[i]!=x do i+:=1 od; i
  od

set cluster = [(int,Param,[string])]:
  for i in indices
  do ( fixed_points[i]
     , eb.p[i]
     , for j in [1,3]
       do let links= [ eb.link0[i,j], eb.link1[i,j] ] in
         extended_status_texts[eb.type[i,j]] ##
         ## for l in links
            do if l<0 then " -" ## int_format(fixed_points[-1-l])
               elif l=#fixed_points then "."
               else " +" ## int_format(fixed_points[l])
               fi
            od
       od
     )
  od

void: for c in cluster do print(c) od
