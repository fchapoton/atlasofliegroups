<basic.at
<combinatorics.at

set size = sum@Partition

set hook_length (Partition P, int i, int j) =int:
  let arm = P[i]-j, leg = transpose(P)[j]-i in arm + leg -1

set dim_rep (Partition P) = int:
  let dim=fac(size(P)) in
  for i:#P do for j:P[i] do dim \:= hook_length(P,i,j) od od; dim

{ all weak compositions of numbers <=limit into n parts }
set rec_fun compositions_le (int limit, int n) = [[int]]:
  if =n then [[]] { one empty composition (0 parts) }
  else let result = [[int]]: [] in
    for last:limit+1
    do
      for rest in compositions_le(limit-last,n-1) do result #:= rest#last od
    od; result
  fi
