<springer_tables.at

<simple_character_table.at
<character_tables.at

<character_table_B.at
<character_table_C.at
<character_table_F.at
<character_table_G.at

<springer_table_A.at
<springer_table_BC.at
<springer_table_F.at
<springer_table_G.at


set springer_table_simple(RootDatum rd)=
let (letter,n)=simple_type(rd) in
if letter="A" then
 let ct=character_table_A(n) in
 springer_table_A(ct)
elif letter="B" then
 let ct_0=character_table_B(n) then
 ct=ct_0.update_degrees in
  springer_table_B(ct)
elif letter="C" then
 let ct_0=character_table_C(n) then
 ct=ct_0.update_degrees in
  springer_table_C(ct)
elif letter="F" then
 let ct=character_table_F4() in
 springer_table_F4(ct)
elif letter="G" then
 springer_table_G2()
else error("case not covered")
fi

set springer_table_reductive(RootDatum rd)=
let factors=simple_factors(rd) then
st=springer_table_simple(factors[0].derived) in
for i:#factors-1 from 1 do
 st:=tensor(st,springer_table_simple(factors[i].derived)) od;st


