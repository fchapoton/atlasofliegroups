* Mathematical work to be done
- Study what the unequal rank case is about, and how to do it

* Work on the Atlas library
- Incorporate the calculation of c-invariant forms into the library
- Rewrite block construction using methods inspired by synthetic operations
- Rewrite K type computations to use data type more compatible with Param

* Work on the Fokko program

- correct bug with mysterious typeahead after bailing out with ? (done?)
- clean up the mess dealing with input (interface/input, io/interactive...)

* Work on the atlas program

- Investigate if some tracing facilty (printing "let" values) is feasible

- Integrate a bigint library to store atlas int (and rat?) values; while
  attending that, signal overflow in arithmetic operations / conversions


- Improve output of expressions
  Nuance "simply connected" and "adjoint" for non-semisimple root data

- Allow multiple overloaded functions defined in a single 'set' statement

- Make balancing a general concept, also applied within row displays.
  This probably requires discovering a priori type in a separate bottom-up
  pass over the |expr| value (maybe inserting casts to record what it found)
  which approach would also help making overload resolution more efficient
- Check whether nested voiding in loops is necessary, maybe do only outer one

- Implement compound assignment directly
  While 'v #:= x' (with vec v, int x) is easy to write (and common in loop
  bodies), it is converted to 'v := v#x' which is not efficient: with 'v'
  still shared when 'v#x' is evaluated, there is no chance of (at least on
  some occasions) reusing the same memory. This could be possible if built-in
  compound assignment were handled as a single operation (even though no user
  defined function could do such a thing). This is most useful for
  concatenation, but operations such as vector addition could also profit.

- Implement value gathering in loop using a sl_list if size is not known.
  Currently all loops gather values in a std::vector; while loops (as well as
  future loops using features that make size of resulting row unknown when
  the loop is started) might do better gathering them in a list structure.

- Allow list-comprehension syntax like in Haskell (and Python?)

- Do some support for object oriented programming (just named tuples might do).

- Premature exits: break from loop, return from function
- Scoping in while loops: declarations of condition remain valid in body?
  The same question arises in conditional: if the condition is the result of
  a complicated computation, could that computation define some local
  variables that remain accessible in addition to the boolean condition?
  However for the conditional one could start a 'let' block before the
  conditional starts to keep variables in scope; for while this doesn't work.
  One possibility would seem to be to view 'do body od' as 'or body; false'
  followed by an empty 'do () od'; at least in void context that would work.

- Allow skipping entries in value-producing loops; concatenating sub-rows.
  When generating a row from a loop, not every iteration need contribute, and
  nested loops might want to contribute to the same row, in a concatenated
  fashion.

- Extend type system to deal with second-order types
- Extend language with recursive types, as well as disjoint union types.
- Allow encapsulation into user-defined types

- Ensure that root data obtained from inner classes or beyond are shared
- Avoid creating many identical |real_form_value| instances, by storing links
  to those currently generated within an |inner_class_value| object
- Check if efficiency features actually work as intended
  For instance v[i]=k should usually avoid a copy of v being made. Also see
  if something can be done to avoid duplication in a +:= x (probably not, as
  one knows nothing about what + does). However, for v #:= x in a loop it
  should be possible to avoid a new allocation for v at every iteration.

* Work on the atlas scripts
- Complete the groups in groups.rx (types G,F); also avoid use of "s" etc.

* Work on documentation

- Write a tutorial on the axis languge, in bottom-up style

* Work on makefiles, distribution and support programs (cwebx)
- change name of parser.y to parser.ypp, and adapt all Makefiles
- Figure out how to avoid 'unrecognised typedefs' all the time
- Make cweavex format a 2-line "do x; while(y);" with correct indentation
- Make cwebx messages mention file name, to 'make -jN' output comprehensible
- Add some make targets for recording options as suggested by Nelson Beebe
