set first (int n)= for i = n do i od  { [0,1,...,n-1] }

set *(string s, int n)= let r="" in (for i = n do r#:=s od; r)

set *(int c,mat m) = mat: for col in m do for e in col do c*e od od

set *(int n,[rat] v) = for e in v do n*e od

set +(string s, int i)= s # int_format(i)
set +(int i, string s)= int_format(i) # s
set +(string s,string t) = s # t { alias for concatenation }

set -(vec w)= vec: for e in w do -e od
set -(mat m)= mat: for c in m do for e in c do -e od od

set +(vec v,vec w)= vec:
  ( if #v != #w then error("Size mismatch " + #v + ":" + #w) fi
  ; for e@i in v do e+w[i] od
  )

set -(vec v,vec w)= vec:
  ( if #v != #w then error("Size mismatch " + #v + ":" + #w) fi
  ; for e@i in v do e-w[i] od
  )

set sum (mat m)= { sum of columns of m }
  let (r,c)=#m in
  if c=0 then vec: for i=r do 0 od
  else let sum=m[0] in for j=c-1 from 1 do sum+:=m[j] od; sum
  fi

set +(string s, (int,int)(x,y)) = s + "(" + x + "," + y + ")"

set floor (rat a) = \ %a
set ceil  (rat a) = -\ %-a

set numer (rat a) = let (n,)=%a in n
set denom (rat a) = let (,d)=%a in d

set floor ([rat] v) = for a in v do floor(a) od
set ceil  ([rat] v) = for a in v do  ceil(a) od

set =((int,int)(x0,y0),(int,int)(x1,y1)) = x0=x1 and y0=y1
set !=((int,int)(x0,y0),(int,int)(x1,y1)) = x0!=x1 or y0!=y1

set +(mat M,mat N)= mat:
  ( if #M != #N then error("Size mismatch " + #M + ":" + #N) fi
  ; for col@j in M do for e@i in col do e+N[i,j] od od
  )

set -(mat M,mat N)= mat:
  ( if #M != #N then error("Size mismatch " + #M + ":" + #N) fi
  ; for col@j in M do for e@i in col do e-N[i,j] od od
  )

set min (int k, int l) = if k<l then k else l fi
set max (int k, int l) = if k<l then l else k fi

set KGB(RealForm rf) = for i=KGB_size(rf) do KGB(rf,i) od
