set #(int n)= for i:n do i od  { [0,1,...,n-1] }
set #(bool b) = if b then 1 else 0 fi { Iverson symbol }
set #(ratvec v)= let (n,)=%v in #n

set *(string s, int n)= let r="" in (for i:n do r#:=s od; r)

set *(int c,vec v) = vec: for e in v do c*e od
set *(int c,mat m) = mat: for col in m do for e in col do c*e od od

set +(string s, int i)= s # int_format(i)
set +(int i, string s)= int_format(i) # s
set +(string s,string t) = s # t { alias for concatenation }

set -(vec w)= vec: for e in w do -e od
set -(mat m)= mat: for c in m do for e in c do -e od od

set +(vec v,vec w)= vec:
  ( if #v != #w then error("Size mismatch " + #v + ":" + #w) fi
  ; for e@i in v do e+w[i] od
  )

set -(vec v,vec w)= vec:
  ( if #v != #w then error("Size mismatch " + #v + ":" + #w) fi
  ; for e@i in v do e-w[i] od
  )

set %(vec v,int d) = vec: for x in v do x%d od

set sum (vec v)= let s=0 in for e in v do s+:=e od; s

set sum (mat m)= { sum of columns of m }
  let (r,)=#m then sum = null(r) in for col in m do sum+:=col od; sum

set +(string s, (int,int)(x,y)) = s + "(" + x + "," + y + ")"

set floor (rat a) = \ %a
set ceil  (rat a) = -\ %-a

set numer (rat a) = let (n,)=%a in n
set denom (rat a) = let (,d)=%a in d
set numer (ratvec a) = let (n,)=%a in n
set denom (ratvec a) = let (,d)=%a in d
set =(ratvec v,ratvec w) = let (n,d)=%v, (m,e)=%w in e*n=d*m
set -(ratvec v) = let (n,d)=%v in (-n)/d
set *(int m,ratvec v) = let (n,d)=%v in m*n/d
set *(mat m,ratvec v) = let (n,d)=%v in m*n/d
set /(ratvec v,int m) = let (n,d)=%v in n/(m*d)
set *(rat r,ratvec v) = let (n,d)=%r, (nv,dv)=%v in (n*nv)/(d*dv)
set *(ratvec r, vec v) = let (n,d)=%r in n*v/d

set floor ([rat] v) = for a in v do floor(a) od
set ceil  ([rat] v) = for a in v do  ceil(a) od

set =((int,int)(x0,y0),(int,int)(x1,y1)) = x0=x1 and y0=y1
set !=((int,int)(x0,y0),(int,int)(x1,y1)) = x0!=x1 or y0!=y1

set +(mat M,mat N)= mat:
  ( if #M != #N then error("Size mismatch " + #M + ":" + #N) fi
  ; for col@j in M do for e@i in col do e+N[i,j] od od
  )

set -(mat M,mat N)= mat:
  ( if #M != #N then error("Size mismatch " + #M + ":" + #N) fi
  ; for col@j in M do for e@i in col do e-N[i,j] od od
  )

set min (int k, int l) = if k<l then k else l fi
set max (int k, int l) = if k<l then l else k fi

set imaginary_roots (RootDatum rd, mat theta) =
  let ir = [vec]: []
  in ( for alpha in roots(rd)
       do if theta*alpha = alpha then ir #:= alpha fi od
     ; if #ir=0 then null(rank(rd),0) else mat: ir fi )

set real_roots (RootDatum rd, mat theta) =
  let rr = [vec]: []
  in ( for alpha in roots(rd)
       do if theta*alpha = -alpha then rr #:= alpha fi od
     ; if #rr=0 then null(rank(rd),0) else mat: rr fi )

set imaginary_coroots (RootDatum rd, mat theta) =
  let ic = [vec]: [], theta=^theta
  in ( for alpha in coroots(rd)
       do if theta*alpha = alpha then ic #:= alpha fi od
     ; if #ic=0 then null(rank(rd),0) else mat: ic fi )

set real_coroots (RootDatum rd, mat theta) =
  let rc = [vec]: [], theta=^theta
  in ( for alpha in coroots(rd)
       do if theta*alpha = -alpha then rc #:= alpha fi od
     ; if #rc=0 then null(rank(rd),0) else mat: rc fi )

set KGB(RealForm rf) = for i:KGB_size(rf) do KGB(rf,i) od
