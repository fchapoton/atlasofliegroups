<my.rx
<nonintegral.rx

{ this script uses functions 'canonical_cocharacter' that are currently
  nowehere defined, so it won't compile as is. One might assume that
  'canoncical_g' from extended_misc was intended, but no version with
  arguments of type (Param,mat) of that function is defined; problematic.
}

set test_ext_cayley (mat delta, Param p,ratvec g,int i) = void:
  let b=block_of(p)
  then eb=ext_block_of(delta,p,g)
  in let rv=[]
  in for E@j in eb
    do
      let line=string:"c_"+ i+ ":E("+ j+ ") -> " in
      let cE=ext_Cayley(i,E) in
      for F@k in cE
      do
	let (sign,index)=find(F,eb) in
	line+:=(if k=1 then " + " else"" fi)+sign+"*E("+index+")"
      od
    ; prints(line)
   od

set test_ext_cayley (mat delta, Param p,int i) = void:
  test_ext_cayley(delta,p,canonical_cocharacter(p,delta) { problem },i)

set test_ext_cayley (Param p,int i) = void:
  test_ext_cayley(distinguished_involution(real_form(p)),p
                 ,canonical_cocharacter(p),i)

set test_ext_cayley (RealForm G) = void:
  let p=spherical_principal_series(G,rho(G)/2)
  then ()=prints("Testing spherical principal series at rho/2 for ", G)
  then ()=print_block(p)
  then ()=ext_print_block(p)
  then n=ss_rank(integrality_datum(p))
  in for i:n do test_ext_cayley(p,i) od
