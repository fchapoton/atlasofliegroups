<basic.rx

{ test if an integer is even, or a rational is an integer }
set is_nonnegative (vec v) = bool:
  let n=#v-1 in while n>=0 and v[n]>=0 do n-:=1 od; n<0
set is_positive (vec v) = bool:
  let n=#v-1 in while n>=0 and v[n]>0 do n-:=1 od; n<0

{ test if a ratvec is in fact a vec (integers)}
set is_integer (ratvec v) = bool: denom(v)=1
set is_positive (ratvec v) = bool: is_positive(numer(v))
set is_nonnegative (ratvec v)= bool: is_nonnegative(numer(v))

{ v is in X^*(H)_Q, test if <v,alpha^\vee>\in Z for all roots\alpha
simple_coroots has (rank) rows and (semisimple rank) columns
v has size rank (not semisimple rank)}
{set is_integral(RootDatum rd, ratvec v)=bool:is_integer(simple_coroots(rd)*v)}
set is_integral(RootDatum rd, ratvec v)=bool:is_integer(v*simple_coroots(rd))


{ transform ParamPol into a list of (Split,Param) pairs; previously built-in }
set %(ParamPol P) = [(Split,Param)]: for c@p in P do (c,p) od

set is_dominant(RootDatum rd, ratvec v) = bool:
  is_nonnegative(numer(v)*simple_coroots(rd))
set is_regular(RootDatum rd,ratvec v)= bool: { tests all positive coroots }
  let w=numer(v)*poscoroots(rd), i=semisimple_rank(rd)-1
  in while i>=0 and w[i]!=0 do i-:=1 od; i<0
set is_strictly_dominant(RootDatum rd, ratvec v) = bool:
  is_positive(numer(v)*simple_coroots(rd))

set is_regular(Param p)=is_regular(real_form(p),infinitesimal_character(p))

{ simpler syntax for param command: param(G,3,...) for param(KGB(G,3),...)  }
set param(RealForm G,int k, vec lambda_rho,ratvec nu) = Param:
  param(KGB(G,k),lambda_rho,nu)

{ replace non-final parameter with [Param p] of final ones
  uses this feature of ParamPol, but ignores any coefficients }
set make_final (Param p)= [Param]: for c@q in ParamPol: p do q od

{ nicer display of Splits }
set split_format (Split w) = string:
  let (a,b)=%w in
  if a=0 and b!=0
  then if abs(b)>1 then int_format(b) elif b=1 then "" else "-" fi #"s"
  else int_format(a) #
    if abs(b)>1 then if b<0 then "" else "+" fi #int_format(b)#"s"
    elif b=0 then "" elif b=1 then "+s" else "-s"
    fi
  fi

{ nice output of ParamPol:
  split_format the coefficients, print terms in order of x }
set pol_format (ParamPol P)= void:
  for w@p in P
  do prints("(",split_format(w),")*",p,", ",infinitesimal_character(p)) od

{ evaluate at s=t for t integer (or rational?): replace w=a+bs with a+bt }
{ would seem to make sense only if t^2=1, so if either t=1 or t=-1 }
set  #(Split w,int t)=let (a,b)=%w in int: a+t*b
set  #(Split w,rat t)=let (a,b)=%w in rat: a+t*b
set  #(ParamPol P,int t)= ParamPol: { with integer coefficiens }
  null_module(real_form(P)) +  for w@q in P do (w#t,q) od

{ evaluate polynomial at split }
set eval(vec v,Split w)= Split:
  let sum=Split:0 in  for i:#v downto 0 do sum:= v[i] + w*sum od; sum

set at_s(vec v) = Split: eval(v,s)

{ evaluate polynomial at integer }
set eval(vec v,int k) = int:
  let sum=0 in  for i:#v downto 0 do sum:= v[i] + k*sum od; sum

{properties of groups}

set fiber_partition(RealForm G) = [int]: fiber_partition(Cartan_class(G,0),G)

set in_distinguished_fiber(KGBElt x) = bool:
  involution(x)=distinguished_involution(real_form(x))

set distinguished_fiber (RealForm G) = [int]:
  let i=0 in
  while i<KGB_size(G) and in_distinguished_fiber(KGB(G,i)) do i next i:=i+1 od

set ss_rank (RootDatum rd)= semisimple_rank(rd)

set dimension (RootDatum rd) = 2*nr_of_posroots(rd)+rank(rd)

set root_length(RootDatum rd,vec alpha) = int: rat_as_int(alpha*rho_check(rd))
set is_simple_root(RootDatum rd,[int] alpha) = bool: root_length(rd,alpha)=1

set simple_imaginary_subsystem (KGBElt x) = (mat,mat): { simple (co)roots }
  simple_from_positive(imaginary_posroots(x),imaginary_poscoroots(x))

set simple_real_subsystem (KGBElt x) = (mat,mat): { simple (co)roots }
  simple_from_positive(real_posroots(x),real_poscoroots(x))

set split_rank(RealForm G) = int:
  let ((c,C,s),,,) = Cartan_info(most_split_Cartan(G)) in C+s

set to_binary (int length, int n) = vec:
  let v=null(length) in
  while (length-:=1)>=0 and n!=0 do let (q,r)=n\%2 in v[length]:=r; n:=q od; v

set generate_all_binary (int length) = [vec]:
  let start=null(length)
  then binary (int n) = vec:
    let v=start, l=length { we need working copies here }
    in while (l-:=1)>=0 and n!=0 do let (q,r)=n\%2 in v[l]:=r; n:=q od; v
  in for i:2^length do binary(i) od

set generate_all_subsets([int] S) = [[int]]:
  let len=#S
  , gen (int i) = [[int]]: [] { recursive stub; generate subset of S[i:] }
  in
  ( gen :=
    ((int i):
      if i=len then [[]]
      else let r=gen(i+1) in r # for x in r do S[i]#x od
      fi)
  )(0)
