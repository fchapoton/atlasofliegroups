{ Some functions for computing with Weyl words for twisted involutions }

<basic.rx

: W_word = (RootDatum,[int])

set root_datum (W_word(rd,)) = RootDatum: rd
set word (W_word(,w))        = [int]:  w
set # (W_word(,w))           = int: #w { non reduced length of word }

{ compute involution from twisted involution Weyl word }
set involution (InnerClass ic, W_word({should be rd from ic},w)) = mat:
  let rd = root_datum(ic), theta = distinguished_involution(ic) in
  for s in w { reverse: } ~ do theta := reflection(rd,s)*theta od;
  theta

set imaginary_roots (InnerClass ic, W_word tw) = mat:
  imaginary_roots(ic,involution(ic,tw))
set real_roots (InnerClass ic, W_word tw) = mat:
  real_roots(ic,involution(ic,tw))
set imaginary_coroots (InnerClass ic, W_word tw) = mat:
  imaginary_coroots(ic,involution(ic,tw))
set real_coroots (InnerClass ic, W_word tw) = mat:
  real_coroots(ic,involution(ic,tw))

{ for cross action on KGBElt values, we can use the RootDatum of the latter }
set W_cross (W_word({should be rd of x},w), KGBElt x) = KGBElt:  W_cross(w,x)
