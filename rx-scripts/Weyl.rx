{ Some functions for computing with Weyl words for twisted involutions }

<basic.rx

: W_word = (RootDatum,[int])

set root_datum(W_word w)=let (rd,)=w in rd
set length(W_word w)=let (,w)=w in #w

{ compute involution from twiseted involution Weyl word }
set involution (InnerClass ic, W_word tw) = mat:
( let rd = root_datum(ic), 
  (,tw)=tw,theta = distinguished_involution(ic)
  in for i : #tw downto 0 do theta := reflection(rd,tw[i])*theta od
  ; theta
)

set imaginary_roots (InnerClass ic, W_word tw) = mat:
  imaginary_roots(ic,involution(ic,tw))
set real_roots (InnerClass ic, W_word tw) = mat:
  real_roots(ic,involution(ic,tw))
set imaginary_coroots (InnerClass ic, W_word tw) = mat:
  imaginary_coroots(ic,involution(ic,tw))
set real_coroots (InnerClass ic, W_word tw) = mat:
  real_coroots(ic,involution(ic,tw))

{now that W_word is defined, need version of basic:rx:W_cross@([int],KGBElt)}
set W_cross(W_word w, KGBElt x)=KGBElt:let (,v)=w in W_cross(v,x)