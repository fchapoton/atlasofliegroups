<LKT

{a few vector manipulations}
set left(ratvec v)=v[:#v\2]
set right(ratvec v)=v[#v\2:#v]
set left(vec v)=v[:#v\2]
set right(vec v)=v[#v\2:#v]
set concatenate(ratvec v,ratvec w)=ratvec:
let (n_v,d_v)=%v, (n_w,d_w)=%w in ((d_w*n_v)#(d_v*n_w))/(d_v*d_w)

{upper right-hand corner of square matrix
application: in a complex group, theta is of the form
(0 w)
(w 0)
upper_right_corner(theta) gives the matrix of w
}
set up_right_corner(mat M)=mat:
let (m,n)=#M in if m!=n then error("matrix is not square") else
let a=m\2 in ^(^M[a:m])[0:a]
fi
set left_w(KGBElt x)=up_right_corner(involution(x))

{extremal weight of LKT of parameter p of G complex
formula: lambda_L+w*lambda_R
}
set mu(Param p)=vec:
let lambda=lambda(p) then
x=x(p) then
w=left_w(x) in
{inverse(w)*left(lambda)+right(lambda)}
ratvec_as_vec(left(lambda)+w*right(lambda))

{A-parameter of parameter of G complex
formula: nu_L-w*nu_R
}
set nu_C(Param p)=
let nu=nu(p) then
x=x(p) then
w=left_w(x) in
{inverse(w)*left(nu)-right(nu)}
left(nu)-w*right(nu)

set gamma_L(Param p)=(mu(p)+nu_C(p))/2
set gamma_R(Param p)=(mu(p)-nu_C(p))/2

{define a parameter of G complex by (gamma_L,gamma_R)
assumption: gamma_L+gamma_R in X^*
}
set gparameter(RealForm G,ratvec gamma_L, ratvec gamma_R)=
let n=#gamma_L then
lambda= ratvec_as_vec(gamma_L+gamma_R)#null(n) then
nu=concatenate((gamma_L-gamma_R)/2, (gamma_R-gamma_L)/2) in
parameter(KGB(G,0),lambda,nu)

{define a parameter of aG complex by (mu,nu)}
set mparameter(RealForm G, vec mu, ratvec nu)=parameter(KGB(G,0), mu#null(#mu), concatenate(nu/2,-nu/2))

